{
  "address": "0x280Ed02db2b90e37c1DE2cC33AeFdb110e572577",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wsteth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ldo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oTokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gammaController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gnosisEasyAuction",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_crvPool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "AuctionDurationSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "CapSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "CloseShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        }
      ],
      "name": "CollectVaultFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "auctioningToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "biddingToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionCounter",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "InitiateGnosisAuction",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InitiateWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "InstantWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "ManagementFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strikePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "name": "NewOptionStrikeSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "options",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "OpenShort",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "PerformanceFeeSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premiumDiscount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "PremiumDiscountSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "round",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAMMA_CONTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GNOSIS_EASY_AUCTION",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LDO",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARGIN_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OTOKEN_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STETH_ETH_CRV_POOL",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auctionDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnRemainingOTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IWSTETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "commitAndClose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOtokenPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creditor",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositReceipts",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "amount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "unredeemedShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositYieldToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numRounds",
          "type": "uint256"
        }
      ],
      "name": "initRounds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_optionsPremiumPricer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strikeSelection",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_premiumDiscount",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_auctionDuration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "initiateWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastQueuedWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastStrikeOverrideRound",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRedeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOption",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextOptionReadyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionAuctionID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionState",
      "outputs": [
        {
          "internalType": "address",
          "name": "nextOption",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "currentOption",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "nextOptionReadyAt",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "optionsPremiumPricer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overriddenStrikePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premiumDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollToNextOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendLDORewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newAuctionDuration",
          "type": "uint256"
        }
      ],
      "name": "setAuctionDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newCap",
          "type": "uint256"
        }
      ],
      "name": "setCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLiquidityGauge",
          "type": "address"
        }
      ],
      "name": "setLiquidityGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newManagementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "setNewKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPerformanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPremiumDiscount",
          "type": "uint256"
        }
      ],
      "name": "setPremiumDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "strikePrice",
          "type": "uint128"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isStrikeSelection",
          "type": "bool"
        }
      ],
      "name": "setStrikeSelectionOrPricer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shareBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "heldByAccount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "heldByVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numShares",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strikeSelection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "uint56",
          "name": "minimumSupply",
          "type": "uint56"
        },
        {
          "internalType": "uint104",
          "name": "cap",
          "type": "uint104"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultState",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint104",
          "name": "lockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint104",
          "name": "lastLockedAmount",
          "type": "uint104"
        },
        {
          "internalType": "uint128",
          "name": "totalPending",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "queuedWithdrawShares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawInstantly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawals",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "round",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "shares",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a1be93153b502978808ec59f5dfa1bc63d60813f90941f546a6296897023a8a",
  "receipt": {
    "to": null,
    "from": "0x422f7Bb366608723c8fe61Ac6D923023dCCBC3d7",
    "contractAddress": "0x280Ed02db2b90e37c1DE2cC33AeFdb110e572577",
    "transactionIndex": 43,
    "gasUsed": "5280705",
    "logsBloom": "0x
    "blockHash": "0x0cd5d1288ec1ce96928ac5457e8a9782214a2236f7a503a1ee4f1b1c3676abb9",
    "transactionHash": "0x4a1be93153b502978808ec59f5dfa1bc63d60813f90941f546a6296897023a8a",
    "logs": [],
    "blockNumber": 14666951,
    "cumulativeGasUsed": "7413007",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
    "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
    "0x5A98FcBEA516Cf06857215779Fd812CA3beF1B32",
    "0x7C06792Af1632E77cb27a558Dc0885338F4Bdf8E",
    "0x4ccc2339F87F6c59c6893E1A678c2266cA58dC72",
    "0x5934807cC0654d46755eBd2848840b616256C6Ef",
    "0x0b7fFc1f4AD541A4Ed16b40D8c37f0929158D101",
    "0xDC24316b9AE028F1497c275EB9192a3Ea0f67022"
  ],
  "solcInputHash": "984ad5116f75c774a92f56a96cabb2a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wsteth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ldo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oTokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gammaController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gnosisEasyAuction\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crvPool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"AuctionDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"CapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"CloseShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"}],\"name\":\"CollectVaultFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"auctioningToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"biddingToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionCounter\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"InitiateGnosisAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InitiateWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"InstantWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"ManagementFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strikePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"name\":\"NewOptionStrikeSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"options\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"OpenShort\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"PerformanceFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premiumDiscount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"PremiumDiscountSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAMMA_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GNOSIS_EASY_AUCTION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LDO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARGIN_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OTOKEN_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STETH_ETH_CRV_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auctionDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRemainingOTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IWSTETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitAndClose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOtokenPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creditor\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositReceipts\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"amount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"unredeemedShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositYieldToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numRounds\",\"type\":\"uint256\"}],\"name\":\"initRounds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_optionsPremiumPricer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strikeSelection\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_premiumDiscount\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_auctionDuration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"initiateWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastQueuedWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStrikeOverrideRound\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOption\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextOptionReadyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionAuctionID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nextOption\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currentOption\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nextOptionReadyAt\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optionsPremiumPricer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overriddenStrikePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premiumDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollToNextOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendLDORewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newAuctionDuration\",\"type\":\"uint256\"}],\"name\":\"setAuctionDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCap\",\"type\":\"uint256\"}],\"name\":\"setCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLiquidityGauge\",\"type\":\"address\"}],\"name\":\"setLiquidityGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"setNewKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPerformanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPremiumDiscount\",\"type\":\"uint256\"}],\"name\":\"setPremiumDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"strikePrice\",\"type\":\"uint128\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isStrikeSelection\",\"type\":\"bool\"}],\"name\":\"setStrikeSelectionOrPricer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shareBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"heldByAccount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"heldByVault\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"shares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numShares\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strikeSelection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultState\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint104\",\"name\":\"lockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint104\",\"name\":\"lastLockedAmount\",\"type\":\"uint104\"},{\"internalType\":\"uint128\",\"name\":\"totalPending\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"queuedWithdrawShares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawInstantly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"round\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"shares\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountVaultBalance(address)\":{\"params\":{\"account\":\"is the address to lookup balance for\"},\"returns\":{\"_0\":\"the amount of `asset` custodied by the vault for the user\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"params\":{\"_crvPool\":\"is the steth/eth crv stables pool\",\"_gammaController\":\"is the contract address for opyn actions\",\"_gnosisEasyAuction\":\"is the contract address that facilitates gnosis auctions\",\"_ldo\":\"is the LDO contract\",\"_marginPool\":\"is the contract address for providing collateral to opyn\",\"_oTokenFactory\":\"is the contract address for minting new opyn option types (strikes, asset, expiry)\",\"_usdc\":\"is the USDC contract\",\"_weth\":\"is the Wrapped Ether contract\",\"_wsteth\":\"is the LDO contract\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"depositFor(address)\":{\"params\":{\"creditor\":\"is the address that can claim/withdraw deposited amount\"}},\"depositYieldToken(uint256)\":{\"params\":{\"amount\":\"is the amount of `collateralAsset` to deposit\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))\":{\"params\":{\"_auctionDuration\":\"is the duration of the gnosis auction\",\"_feeRecipient\":\"is the address to recieve vault performance and management fees\",\"_keeper\":\"is the keeper of the vault with medium permissions (weekly actions)\",\"_managementFee\":\"is the management fee pct.\",\"_optionsPremiumPricer\":\"is the address of the contract with the black-scholes premium calculation logic\",\"_owner\":\"is the owner of the vault with critical permissions\",\"_performanceFee\":\"is the perfomance fee pct.\",\"_premiumDiscount\":\"is the vault's discount applied to the premium\",\"_strikeSelection\":\"is the address of the contract with strike selection logic\",\"_tokenName\":\"is the name of the token\",\"_tokenSymbol\":\"is the symbol of the token\",\"_vaultParams\":\"is the struct with vault general data\"}},\"initiateWithdraw(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to withdraw\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAuctionDuration(uint256)\":{\"params\":{\"newAuctionDuration\":\"is the auction duration\"}},\"setCap(uint256)\":{\"params\":{\"newCap\":\"is the new cap for deposits\"}},\"setFeeRecipient(address)\":{\"params\":{\"newFeeRecipient\":\"is the address of the new fee recipient\"}},\"setLiquidityGauge(address)\":{\"params\":{\"newLiquidityGauge\":\"is the address of the new liquidityGauge contract\"}},\"setManagementFee(uint256)\":{\"params\":{\"newManagementFee\":\"is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\"}},\"setNewKeeper(address)\":{\"params\":{\"newKeeper\":\"is the address of the new keeper\"}},\"setPerformanceFee(uint256)\":{\"params\":{\"newPerformanceFee\":\"is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\"}},\"setPremiumDiscount(uint256)\":{\"params\":{\"newPremiumDiscount\":\"is the premium discount\"}},\"setStrikePrice(uint128)\":{\"params\":{\"strikePrice\":\"is the strike price of the new oTokens (decimals = 8)\"}},\"setStrikeSelectionOrPricer(address,bool)\":{\"params\":{\"isStrikeSelection\":\"is whether we are setting the strike selection contract\",\"newContract\":\"is the address of the new strike selection or options premium pricer contract\"}},\"shareBalances(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"heldByAccount\":\"is the shares held by account\",\"heldByVault\":\"is the shares held on the vault (unredeemedShares)\"}},\"shares(address)\":{\"params\":{\"account\":\"is the account to lookup share balance for\"},\"returns\":{\"_0\":\"the share balance\"}},\"stake(uint256)\":{\"params\":{\"numShares\":\"is the number of shares to stake\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalBalance()\":{\"returns\":{\"_0\":\"total balance of the vault, including the amounts locked in third party protocols\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawInstantly(uint256,uint256)\":{\"params\":{\"amount\":\"is the amount to withdraw in `asset`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELAY()\":{\"notice\":\"15 minute timelock between commitAndClose and rollToNexOption.\"},\"LDO()\":{\"notice\":\"Lido DAO token 0x5a98fcbea516cf06857215779fd812ca3bef1b32\"},\"OTOKEN_FACTORY()\":{\"notice\":\"is the factory contract used to spawn otokens. Used to lookup otokens.\"},\"PERIOD()\":{\"notice\":\"7 day period between each options sale.\"},\"STETH()\":{\"notice\":\"STETH contract address\"},\"USDC()\":{\"notice\":\"USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\"},\"WETH()\":{\"notice\":\"WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\"},\"accountVaultBalance(address)\":{\"notice\":\"Returns the asset balance held on the vault for the account\"},\"burnRemainingOTokens()\":{\"notice\":\"Burn the remaining oTokens left over from gnosis auction.\"},\"collateralToken()\":{\"notice\":\"wstETH vault contract\"},\"commitAndClose()\":{\"notice\":\"Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious.\"},\"completeWithdraw()\":{\"notice\":\"Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\"},\"constructor\":{\"notice\":\"Initializes the contract with immutable variables\"},\"decimals()\":{\"notice\":\"Returns the token decimals\"},\"depositETH()\":{\"notice\":\"Deposits ETH into the contract and mint vault shares.\"},\"depositFor(address)\":{\"notice\":\"Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf\"},\"depositReceipts(address)\":{\"notice\":\"Stores the user's pending deposit for the round\"},\"depositYieldToken(uint256)\":{\"notice\":\"Deposits the `collateralAsset` into the contract and mint vault shares.\"},\"feeRecipient()\":{\"notice\":\"Fee recipient for the performance and management fees\"},\"initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))\":{\"notice\":\"Initializes the OptionVault contract with storage variables.\"},\"initiateWithdraw(uint256)\":{\"notice\":\"Initiates a withdrawal that can be processed once the round completes\"},\"keeper()\":{\"notice\":\"role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\"},\"managementFee()\":{\"notice\":\"Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\"},\"maxRedeem()\":{\"notice\":\"Redeems the entire unredeemedShares balance that is owed to the account\"},\"optionState()\":{\"notice\":\"Vault's state of the options sold and the timelocked option\"},\"performanceFee()\":{\"notice\":\"Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\"},\"pricePerShare()\":{\"notice\":\"The price of a unit of share denominated in the `asset`\"},\"redeem(uint256)\":{\"notice\":\"Redeems shares that are owed to the account\"},\"rollToNextOption()\":{\"notice\":\"Rolls the vault's funds into a new short position.\"},\"roundPricePerShare(uint256)\":{\"notice\":\"On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount\"},\"setAuctionDuration(uint256)\":{\"notice\":\"Sets the new auction duration\"},\"setCap(uint256)\":{\"notice\":\"Sets a new cap for deposits\"},\"setFeeRecipient(address)\":{\"notice\":\"Sets the new fee recipient\"},\"setLiquidityGauge(address)\":{\"notice\":\"Sets the new liquidityGauge contract for this vault\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the management fee for the vault\"},\"setNewKeeper(address)\":{\"notice\":\"Sets the new keeper\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Sets the performance fee for the vault\"},\"setPremiumDiscount(uint256)\":{\"notice\":\"Sets the new discount on premiums for options we are selling\"},\"setStrikePrice(uint128)\":{\"notice\":\"Optionality to set strike price manually\"},\"setStrikeSelectionOrPricer(address,bool)\":{\"notice\":\"Sets the new strike selection or options premium pricer contract\"},\"shareBalances(address)\":{\"notice\":\"Getter for returning the account's share balance split between account and vault holdings\"},\"shares(address)\":{\"notice\":\"Getter for returning the account's share balance including unredeemed shares\"},\"stake(uint256)\":{\"notice\":\"Stakes a users vault shares\"},\"startAuction()\":{\"notice\":\"Initiate the gnosis auction.\"},\"totalBalance()\":{\"notice\":\"Returns the vault's total balance, including the amounts locked into a short position\"},\"vaultParams()\":{\"notice\":\"Vault's parameters like cap, decimals\"},\"vaultState()\":{\"notice\":\"Vault's lifecycle state like round and locked amounts\"},\"withdrawInstantly(uint256,uint256)\":{\"notice\":\"Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\"},\"withdrawals(address)\":{\"notice\":\"Stores pending user withdrawals\"}},\"notice\":\"UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaSTETHVaultStorage. RibbonThetaSTETHVault should not inherit from any other contract aside from RibbonVault, RibbonThetaSTETHVaultStorage\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol\":\"RibbonThetaSTETHVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n}\\n\\ninterface IOracle {\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function updateAssetPricer(address _asset, address _pricer) external;\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x148930e8fd36c64b8dbe75c2ba71117eaf4a6da5a019e08f3ff8161b274785ba\",\"license\":\"MIT\"},\"contracts/interfaces/ICRV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ICRV {\\n    function get_dy(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn\\n    ) external view returns (uint256);\\n\\n    // https://github.com/curvefi/curve-contract/blob/\\n    // b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pools/steth/StableSwapSTETH.vy#L431\\n    function exchange(\\n        int128 _indexIn,\\n        int128 _indexOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xd2277c5ea1909c5760c9f649c46ea93ddb7bdcae04ec443001e329182545e58f\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0x90fd29862ecc4bc1f2ee3e4d5c42364c5fbcc0f43f907d2bb82665f93df0d218\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x226639ee48018ec78891a829816799c9b9f6bbec7e84c4ca43cdc7dc8a07628f\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface ILiquidityGauge {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _value,\\n        address _addr,\\n        bool _claim_rewards\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6e79ff74844b0e1ffcf22a507df8ec4de95a1f8e420d9ecb475cbc932cb6f51d\",\"license\":\"MIT\"},\"contracts/interfaces/IOptionsPurchaseQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IOptionsPurchaseQueue {\\n    /**\\n     * @dev Contains purchase request info\\n     * @param optionsAmount Amount of options to purchase\\n     * @param premiums Total premiums the buyer is spending to purchase the options (optionsAmount * ceilingPrice)\\n     *  We need to track the premiums here since the ceilingPrice could change between the time the purchase was\\n     *  requested and when the options are sold\\n     * @param buyer The buyer requesting this purchase\\n     */\\n    struct Purchase {\\n        uint128 optionsAmount; // Slot 0\\n        uint128 premiums;\\n        address buyer; // Slot 1\\n    }\\n\\n    function purchases(address, uint256)\\n        external\\n        view\\n        returns (\\n            uint128,\\n            uint128,\\n            address\\n        );\\n\\n    function totalOptionsAmount(address) external view returns (uint256);\\n\\n    function vaultAllocatedOptions(address) external view returns (uint256);\\n\\n    function whitelistedBuyer(address) external view returns (bool);\\n\\n    function minPurchaseAmount(address) external view returns (uint256);\\n\\n    function ceilingPrice(address) external view returns (uint256);\\n\\n    function getPurchases(address vault)\\n        external\\n        view\\n        returns (Purchase[] memory);\\n\\n    function getPremiums(address vault, uint256 optionsAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function requestPurchase(address vault, uint256 optionsAmount)\\n        external\\n        returns (uint256);\\n\\n    function allocateOptions(uint256 allocatedOptions)\\n        external\\n        returns (uint256);\\n\\n    function sellToBuyers(uint256 settlementPrice) external returns (uint256);\\n\\n    function cancelAllPurchases(address vault) external;\\n\\n    function addWhitelist(address buyer) external;\\n\\n    function removeWhitelist(address buyer) external;\\n\\n    function setCeilingPrice(address vault, uint256 price) external;\\n\\n    function setMinPurchaseAmount(address vault, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x3033ae23c42a0da011d8e43d911ec7d999ccbc18a73e24098dfd202a71000086\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd9ffea587ce992000d8a9f8d4b1bc8c40008633c35121b3d11ab8c6a7dd5ecbc\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x971c0b438d7931eb53ae8f57a15304db62917845b36ebef3d501a5f1628c82e3\",\"license\":\"MIT\"},\"contracts/interfaces/ISTETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWSTETH {\\n    function getStETHByWstETH(uint256 _amount) external view returns (uint256);\\n\\n    function getWstETHByStETH(uint256 _amount) external view returns (uint256);\\n\\n    function stEthPerToken() external view returns (uint256);\\n\\n    function tokensPerStEth() external view returns (uint256);\\n\\n    function stETH() external view returns (address);\\n\\n    function wrap(uint256 _amount) external returns (uint256);\\n\\n    function unwrap(uint256 _amount) external returns (uint256);\\n\\n    function approve(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\\ninterface ISTETH {\\n    function getBufferedEther(uint256 _amount) external view returns (uint256);\\n\\n    function getPooledEthByShares(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function submit(address _referralAddress)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash)\\n        external\\n        returns (uint256);\\n\\n    function approve(address _recipient, uint256 _amount)\\n        external\\n        returns (bool);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n\\n    function getTotalShares() external view returns (uint256);\\n\\n    function getTotalPooledEther() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x57bffc6a306938455081c031a2e605873e2e686ca181b1178e030db4e2e00444\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decimals() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x027f79659aea02845423eb96cfc4f926efb2214745463e3cbcfe4e4c24a065d9\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 oTokenPremium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address oTokenAddress;\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.oTokenAddress);\\n        require(oTokenSellAmount > 0, \\\"No otokens to sell\\\");\\n\\n        IERC20(auctionDetails.oTokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.oTokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath.wmul(\\n                oTokenSellAmount.mul(10**10),\\n                auctionDetails.oTokenPremium\\n            );\\n\\n        minBidAmount = auctionDetails.assetDecimals > 18\\n            ? minBidAmount.mul(10**(auctionDetails.assetDecimals.sub(18)))\\n            : minBidAmount.div(\\n                10**(uint256(18).sub(auctionDetails.assetDecimals))\\n            );\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp.add(auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of oToken we minted and are selling\\n            auctionDetails.oTokenAddress,\\n            // address of asset we want in exchange for oTokens. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.oTokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            .mul(bidDetails.optionAllocation)\\n            .div(100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            .mul(10**(bidDetails.assetDecimals.add(Vault.OTOKEN_DECIMALS)))\\n            .div(bidDetails.optionPremium)\\n            .div(10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.oTokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address oTokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(oTokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremiumInStables(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated USDC for both call and put options\\n        uint256 optionPremium =\\n            premiumPricer.getPremiumInStables(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xfbe9e9b0da571d9b83545d3ae71827da0f91bd1c68c6b68955907e6e967e4972\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x90bc4b56ee48f314d1e326903bdb2926bed143fa4e6867a7d44975503106bf56\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xda967c8a0bcbdf15b1b60c4cba1d0b12aae75431570dfbb5fb06b64162c83cb0\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Amount locked for scheduled withdrawals;\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x462aa30f83c322d3129ded8da0d5f8430425a04c8c2d87787f33d7d5c41c1571\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOptionsPurchaseQueue} from \\\"../interfaces/IOptionsPurchaseQueue.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\n\\nlibrary VaultLifecycle {\\n    using SafeMath for uint256;\\n    using SupportsNonCompliantERC20 for IERC20;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address currentOption;\\n        uint256 delay;\\n        uint16 lastStrikeOverrideRound;\\n        uint256 overriddenStrikePrice;\\n        address strikeSelection;\\n        address optionsPremiumPricer;\\n        uint256 premiumDiscount;\\n    }\\n\\n    /// @notice Default maximum option allocation for the queue (50%)\\n    uint256 internal constant QUEUE_OPTION_ALLOCATION = 5000;\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry = getNextExpiry(closeParams.currentOption);\\n\\n        IStrikeSelection selection =\\n            IStrikeSelection(closeParams.strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, isPut);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrice,\\n            expiry,\\n            isPut\\n        );\\n\\n        // get the black scholes premium of the option\\n        premium = _getOTokenPremium(\\n            otokenAddress,\\n            closeParams.optionsPremiumPricer,\\n            closeParams.premiumDiscount\\n        );\\n\\n        require(premium > 0, \\\"!premium\\\");\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp.add(delay);\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param asset is the address of the vault's asset\\n     * @param decimals is the decimals of the asset\\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        uint256 queuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        uint256 balanceForVaultFees;\\n        {\\n            uint256 pricePerShareBeforeFee =\\n                ShareMath.pricePerShare(\\n                    params.currentShareSupply,\\n                    currentBalance,\\n                    pendingAmount,\\n                    params.decimals\\n                );\\n\\n            uint256 queuedWithdrawBeforeFee =\\n                params.currentShareSupply > 0\\n                    ? ShareMath.sharesToAsset(\\n                        queuedWithdrawShares,\\n                        pricePerShareBeforeFee,\\n                        params.decimals\\n                    )\\n                    : 0;\\n\\n            // Deduct the difference between the newly scheduled withdrawals\\n            // and the older withdrawals\\n            // so we can charge them fees before they leave\\n            uint256 withdrawAmountDiff =\\n                queuedWithdrawBeforeFee > params.lastQueuedWithdrawAmount\\n                    ? queuedWithdrawBeforeFee.sub(\\n                        params.lastQueuedWithdrawAmount\\n                    )\\n                    : 0;\\n\\n            balanceForVaultFees = currentBalance\\n                .sub(queuedWithdrawBeforeFee)\\n                .add(withdrawAmountDiff);\\n        }\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance.sub(totalVaultFee);\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply,\\n                currentBalance,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n\\n            uint256 newSupply = params.currentShareSupply.add(mintShares);\\n\\n            queuedWithdrawAmount = newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    queuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                )\\n                : 0;\\n        }\\n\\n        return (\\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        if (oToken.isPut()) {\\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n            // This is because of an issue with precision.\\n            //\\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n            //\\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n            // We retain the dust in the vault so the calling contract can withdraw the\\n            // actual locked amount + dust at settlement.\\n            //\\n            // To test this behavior, we can console.log\\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n            // to see how much dust (or excess collateral) is left behind.\\n            mintAmount = depositAmount\\n                .mul(10**Vault.OTOKEN_DECIMALS)\\n                .mul(10**18) // we use 10**18 to give extra precision\\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\\n        } else {\\n            mintAmount = depositAmount;\\n\\n            if (collateralDecimals > 8) {\\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n                if (mintAmount > scaleBy) {\\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n                }\\n            }\\n        }\\n\\n        // double approve to fix non-compliant ERC20s\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleShort(address gammaController) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\\n     * It calls the `Redeem` action to claim the payout.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param oldOption is the address of the old option\\n     * @param asset is the address of the vault's asset\\n     * @return amount of asset received by exercising the option\\n     */\\n    function settleLong(\\n        address gammaController,\\n        address oldOption,\\n        address asset\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\\n\\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\\n            return 0;\\n        }\\n\\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        // If it is after expiry, we need to redeem the profits\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.Redeem,\\n            address(0), // not used\\n            address(this), // address to send profits to\\n            oldOption, // address of otoken\\n            0, // not used\\n            oldOptionBalance, // otoken balance\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\\n\\n        return endAssetBalance.sub(startAssetBalance);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param currentOption is the address of the current option\\n     * @return amount of collateral redeemed by burning otokens\\n     */\\n    function burnOtokens(address gammaController, address currentOption)\\n        external\\n        returns (uint256)\\n    {\\n        uint256 numOTokensToBurn =\\n            IERC20(currentOption).balanceOf(address(this));\\n\\n        require(numOTokensToBurn > 0, \\\"No oTokens to burn\\\");\\n\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // Burning `amount` of oTokens from the ribbon vault,\\n        // then withdrawing the corresponding collateral amount from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.BurnShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            address(vault.shortOtokens[0]), // otoken address\\n            vaultID, // vaultId\\n            numOTokensToBurn, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.WithdrawCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(collateralToken), // withdrawn asset\\n            vaultID, // vaultId\\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\\n                vault.shortAmounts[0]\\n            ), // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        return endCollateralBalance.sub(startCollateralBalance);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance.sub(pendingAmount)\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? lockedBalanceSansPending\\n                    .sub(lastLockedAmount)\\n                    .mul(performanceFeePercent)\\n                    .div(100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\\n                    100 * Vault.FEE_MULTIPLIER\\n                )\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option token if it already exists, or deploy it\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrice is the strike price of the option\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return the address of the option\\n     */\\n    function getOrDeployOtoken(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrice,\\n                expiry,\\n                isPut\\n            );\\n\\n        verifyOtoken(\\n            otoken,\\n            vaultParams,\\n            collateralAsset,\\n            closeParams.USDC,\\n            closeParams.delay\\n        );\\n\\n        return otoken;\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) external view returns (uint256) {\\n        return\\n            _getOTokenPremium(\\n                oTokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount\\n            );\\n    }\\n\\n    function _getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n        require(optionPremium > 0, \\\"!optionPremium\\\");\\n\\n        return optionPremium;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Settles the gnosis auction\\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\\n     * @param auctionID is the auction ID of the gnosis easy auction\\n     */\\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\\n        internal\\n    {\\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\\n    }\\n\\n    /**\\n     * @notice Places a bid in an auction\\n     * @param bidDetails is the struct with all the details of the\\n      bid including the auction's id and how much to bid\\n     */\\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\\n        external\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        return GnosisAuction.placeBid(bidDetails);\\n    }\\n\\n    /**\\n     * @notice Claims the oTokens belonging to the vault\\n     * @param auctionSellOrder is the sell order of the bid\\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\\n     holding custody to the funds\\n     * @param counterpartyThetaVault is the address of the counterparty theta\\n     vault of this delta vault\\n     */\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) external {\\n        GnosisAuction.claimAuctionOtokens(\\n            auctionSellOrder,\\n            gnosisEasyAuction,\\n            counterpartyThetaVault\\n        );\\n    }\\n\\n    /**\\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param option is the minted option\\n     * @param optionsAmount is the amount of options minted\\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\\n     *  up to the amount that is on the queue)\\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\\n     */\\n    function allocateOptions(\\n        address optionsPurchaseQueue,\\n        address option,\\n        uint256 optionsAmount,\\n        uint256 optionAllocation\\n    ) external returns (uint256 allocatedOptions) {\\n        // Skip if optionsPurchaseQueue is address(0)\\n        if (optionsPurchaseQueue != address(0)) {\\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\\n            );\\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\\n                .getOptionsAllocation(address(this), allocatedOptions);\\n\\n            if (allocatedOptions != 0) {\\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\\n                    allocatedOptions\\n                );\\n            }\\n        }\\n\\n        return allocatedOptions;\\n    }\\n\\n    /**\\n     * @notice Sell the allocated options to the purchase queue post auction settlement\\n     * @dev Reverts if the auction hasn't settled yet\\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\\n     * @return totalPremiums Total premiums earnt by the vault\\n     */\\n    function sellOptionsToQueue(\\n        address optionsPurchaseQueue,\\n        address gnosisEasyAuction,\\n        uint256 optionAuctionID\\n    ) external returns (uint256) {\\n        uint256 settlementPrice =\\n            getAuctionSettlementPrice(gnosisEasyAuction, optionAuctionID);\\n        require(settlementPrice != 0, \\\"!settlementPrice\\\");\\n\\n        return\\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\\n                settlementPrice\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the settlement price of a settled auction\\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\\n     * @return settlementPrice Auction settlement price\\n     */\\n    function getAuctionSettlementPrice(\\n        address gnosisEasyAuction,\\n        uint256 optionAuctionID\\n    ) public view returns (uint256) {\\n        bytes32 clearingPriceOrder =\\n            IGnosisAuction(gnosisEasyAuction)\\n                .auctionData(optionAuctionID)\\n                .clearingPriceOrder;\\n\\n        if (clearingPriceOrder == bytes32(0)) {\\n            // Current auction hasn't settled yet\\n            return 0;\\n        } else {\\n            // We decode the clearingPriceOrder to find the auction settlement price\\n            // settlementPrice = clearingPriceOrder.sellAmount / clearingPriceOrder.buyAmount\\n            return\\n                (10**Vault.OTOKEN_DECIMALS)\\n                    .mul(\\n                    uint96(uint256(clearingPriceOrder)) // sellAmount\\n                )\\n                    .div(\\n                    uint96(uint256(clearingPriceOrder) >> 96) // buyAmount\\n                );\\n        }\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry timestamp\\n     * @param currentOption is the otoken address that the vault is currently writing\\n     */\\n    function getNextExpiry(address currentOption)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // uninitialized state\\n        if (currentOption == address(0)) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\\n\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 7 days) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        return getNextFriday(currentExpiry);\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param timestamp is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n}\\n\",\"keccak256\":\"0xb090576f5b0e91cf60c0e26bf56d2cfa0a98487531a00c7126bcae08f702d1db\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleSTETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {VaultLifecycle} from \\\"./VaultLifecycle.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {ISTETH, IWSTETH} from \\\"../interfaces/ISTETH.sol\\\";\\nimport {IWETH} from \\\"../interfaces/IWETH.sol\\\";\\nimport {ICRV} from \\\"../interfaces/ICRV.sol\\\";\\nimport {IStrikeSelection} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\n\\nlibrary VaultLifecycleSTETH {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @param collateralAsset is the address of the collateral asset\\n     * @return otokenAddress is the address of the new option\\n     * @return premium is the premium of the new option\\n     * @return strikePrice is the strike price of the new option\\n     * @return delta is the delta of the new option\\n     */\\n    function commitAndClose(\\n        VaultLifecycle.CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState,\\n        address collateralAsset\\n    )\\n        external\\n        returns (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        )\\n    {\\n        uint256 expiry =\\n            VaultLifecycle.getNextExpiry(closeParams.currentOption);\\n\\n        IStrikeSelection selection =\\n            IStrikeSelection(closeParams.strikeSelection);\\n\\n        // calculate strike and delta\\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\\n            vaultState.round\\n            ? (closeParams.overriddenStrikePrice, selection.delta())\\n            : selection.getStrikePrice(expiry, false);\\n\\n        require(strikePrice != 0, \\\"!strikePrice\\\");\\n\\n        // retrieve address if option already exists, or deploy it\\n        otokenAddress = VaultLifecycle.getOrDeployOtoken(\\n            closeParams,\\n            vaultParams,\\n            vaultParams.underlying,\\n            collateralAsset,\\n            strikePrice,\\n            expiry,\\n            false\\n        );\\n\\n        premium = _getOTokenPremium(\\n            otokenAddress,\\n            closeParams.optionsPremiumPricer,\\n            closeParams.premiumDiscount,\\n            collateralAsset\\n        );\\n\\n        return (otokenAddress, premium, strikePrice, delta);\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param currentShareSupply is the total supply of shares\\n     * @param currentBalance is the total balance of the vault\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     */\\n    function rollover(\\n        uint256 currentShareSupply,\\n        uint256 currentBalance,\\n        Vault.VaultParams calldata vaultParams,\\n        Vault.VaultState calldata vaultState\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares\\n        )\\n    {\\n        uint256 pendingAmount = uint256(vaultState.totalPending);\\n        uint256 _decimals = vaultParams.decimals;\\n\\n        newPricePerShare = ShareMath.pricePerShare(\\n            currentShareSupply,\\n            currentBalance,\\n            pendingAmount,\\n            _decimals\\n        );\\n\\n        // After closing the short, if the options expire in-the-money\\n        // vault pricePerShare would go down because vault's asset balance decreased.\\n        // This ensures that the newly-minted shares do not take on the loss.\\n        uint256 _mintShares =\\n            ShareMath.assetToShares(pendingAmount, newPricePerShare, _decimals);\\n\\n        uint256 newSupply = currentShareSupply.add(_mintShares);\\n        uint256 queuedAmount =\\n            newSupply > 0\\n                ? ShareMath.sharesToAsset(\\n                    vaultState.queuedWithdrawShares,\\n                    newPricePerShare,\\n                    _decimals\\n                )\\n                : 0;\\n\\n        return (\\n            currentBalance.sub(queuedAmount),\\n            queuedAmount,\\n            newPricePerShare,\\n            _mintShares\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param oTokenAddress is the address of the otoken to mint\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @return the otoken mint amount\\n     */\\n    function createShort(\\n        address gammaController,\\n        address marginPool,\\n        address oTokenAddress,\\n        uint256 depositAmount\\n    ) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n        uint256 newVaultID =\\n            (controller.getAccountVaultCounter(address(this))).add(1);\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IOtoken oToken = IOtoken(oTokenAddress);\\n        address collateralAsset = oToken.collateralAsset();\\n\\n        uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n        uint256 mintAmount;\\n\\n        mintAmount = depositAmount;\\n        if (collateralDecimals > 8) {\\n            uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\\n            if (mintAmount > scaleBy) {\\n                mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\\n            }\\n        }\\n\\n        IERC20 collateralToken = IERC20(collateralAsset);\\n        collateralToken.safeApprove(marginPool, depositAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](3);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.OpenVault,\\n            address(this), // owner\\n            address(this), // receiver\\n            address(0), // asset, otoken\\n            newVaultID, // vaultId\\n            0, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n            IController.ActionType.DepositCollateral,\\n            address(this), // owner\\n            address(this), // address to transfer from\\n            collateralAsset, // deposited asset\\n            newVaultID, // vaultId\\n            depositAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        actions[2] = IController.ActionArgs(\\n            IController.ActionType.MintShortOption,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            oTokenAddress, // option address\\n            newVaultID, // vaultId\\n            mintAmount, // amount\\n            0, //index\\n            \\\"\\\" //data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return mintAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws stETH + WETH (if necessary) from vault using vault shares\\n     * @param collateralToken is the address of the collateral token\\n     * @param weth is the WETH address\\n     * @param recipient is the recipient\\n     * @param amount is the withdraw amount in `asset`\\n     * @return withdrawAmount is the withdraw amount in `collateralToken`\\n     */\\n    function withdrawYieldAndBaseToken(\\n        address collateralToken,\\n        address weth,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        IWSTETH collateral = IWSTETH(collateralToken);\\n\\n        uint256 withdrawAmount = collateral.getWstETHByStETH(amount);\\n\\n        uint256 yieldTokenBalance =\\n            withdrawYieldToken(collateralToken, recipient, withdrawAmount);\\n\\n        // If there is not enough wstETH in the vault, it withdraws as much as possible and\\n        // transfers the rest in `asset`\\n        if (withdrawAmount > yieldTokenBalance) {\\n            withdrawBaseToken(\\n                collateralToken,\\n                weth,\\n                recipient,\\n                withdrawAmount,\\n                yieldTokenBalance\\n            );\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Withdraws stETH from vault\\n     * @param collateralToken is the address of the collateral token\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @return yieldTokenBalance is the balance of the yield token\\n     */\\n    function withdrawYieldToken(\\n        address collateralToken,\\n        address recipient,\\n        uint256 withdrawAmount\\n    ) internal returns (uint256) {\\n        IERC20 collateral = IERC20(collateralToken);\\n\\n        uint256 yieldTokenBalance = collateral.balanceOf(address(this));\\n        uint256 yieldTokensToWithdraw =\\n            DSMath.min(yieldTokenBalance, withdrawAmount);\\n        if (yieldTokensToWithdraw > 0) {\\n            collateral.safeTransfer(recipient, yieldTokensToWithdraw);\\n        }\\n\\n        return yieldTokenBalance;\\n    }\\n\\n    /**\\n     * @notice Withdraws `asset` from vault\\n     * @param collateralToken is the address of the collateral token\\n     * @param weth is the WETH address\\n     * @param recipient is the recipient\\n     * @param withdrawAmount is the withdraw amount in terms of yearn tokens\\n     * @param yieldTokenBalance is the collateral token (stETH) balance of the vault\\n     */\\n    function withdrawBaseToken(\\n        address collateralToken,\\n        address weth,\\n        address recipient,\\n        uint256 withdrawAmount,\\n        uint256 yieldTokenBalance\\n    ) internal {\\n        uint256 underlyingTokensToWithdraw =\\n            IWSTETH(collateralToken).getStETHByWstETH(\\n                withdrawAmount.sub(yieldTokenBalance)\\n            );\\n\\n        IWETH(weth).deposit{value: underlyingTokensToWithdraw}();\\n        IERC20(weth).safeTransfer(recipient, underlyingTokensToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Unwraps the necessary amount of the wstETH token\\n     *         and transfers ETH amount to vault\\n     * @param amount is the amount of ETH to withdraw\\n     * @param wstEth is the address of wstETH\\n     * @param stethToken is the address of stETH\\n     * @param crvPool is the address of the steth <-> eth pool on curve\\n     * @param minETHOut is the minimum eth amount to receive from the swap\\n     * @return amountETHOut is the amount of eth unwrapped\\n     available for the withdrawal (may incur curve slippage)\\n     */\\n    function unwrapYieldToken(\\n        uint256 amount,\\n        address wstEth,\\n        address stethToken,\\n        address crvPool,\\n        uint256 minETHOut\\n    ) external returns (uint256) {\\n        require(\\n            amount >= minETHOut,\\n            \\\"Amount withdrawn smaller than minETHOut from swap\\\"\\n        );\\n        require(\\n            minETHOut.mul(10**18).div(amount) >= 0.95 ether,\\n            \\\"Slippage on minETHOut too high\\\"\\n        );\\n\\n        uint256 ethBalance = address(this).balance;\\n        IERC20 steth = IERC20(stethToken);\\n        uint256 stethBalance = steth.balanceOf(address(this));\\n\\n        // 3 different success scenarios\\n        // Scenario 1. We hold enough ETH to satisfy withdrawal. Send it out directly\\n        // Scenario 2. We hold enough wstETH to satisy withdrawal. Unwrap then swap\\n        // Scenario 3. We hold enough ETH + stETH to satisfy withdrawal. Do a swap\\n\\n        // Scenario 1\\n        if (ethBalance >= amount) {\\n            return amount;\\n        }\\n\\n        // Scenario 2\\n        stethBalance = unwrapWstethForWithdrawal(\\n            wstEth,\\n            steth,\\n            ethBalance,\\n            stethBalance,\\n            amount,\\n            minETHOut\\n        );\\n\\n        // Scenario 3\\n        // Now that we satisfied the ETH + stETH sum, we swap the stETH amounts necessary\\n        // to facilitate a withdrawal\\n\\n        // This won't underflow since we already asserted that ethBalance < amount before this\\n        uint256 stEthAmountToSwap =\\n            DSMath.min(amount.sub(ethBalance), stethBalance);\\n\\n        uint256 ethAmountOutFromSwap =\\n            swapStEthToEth(steth, crvPool, stEthAmountToSwap);\\n\\n        uint256 totalETHOut = ethBalance.add(ethAmountOutFromSwap);\\n\\n        // Since minETHOut is derived from calling the Curve pool's getter,\\n        // it reverts in the worst case where the user needs to unwrap and sell\\n        // 100% of their ETH withdrawal amount\\n        require(\\n            totalETHOut >= minETHOut,\\n            \\\"Output ETH amount smaller than minETHOut\\\"\\n        );\\n\\n        return totalETHOut;\\n    }\\n\\n    /**\\n     * @notice Unwraps the required amount of wstETH to a target ETH amount\\n     * @param wstEthAddress is the address for wstETH\\n     * @param steth is the ERC20 of stETH\\n     * @param startStEthBalance is the starting stETH balance used to determine how much more to unwrap\\n     * @param ethAmount is the ETH amount needed for the contract\\n     * @param minETHOut is the ETH amount but adjusted for slippage\\n     * @return the new stETH balance\\n     */\\n    function unwrapWstethForWithdrawal(\\n        address wstEthAddress,\\n        IERC20 steth,\\n        uint256 ethBalance,\\n        uint256 startStEthBalance,\\n        uint256 ethAmount,\\n        uint256 minETHOut\\n    ) internal returns (uint256) {\\n        uint256 ethstEthSum = ethBalance.add(startStEthBalance);\\n\\n        if (ethstEthSum < minETHOut) {\\n            uint256 stethNeededFromUnwrap = ethAmount.sub(ethstEthSum);\\n            IWSTETH wstEth = IWSTETH(wstEthAddress);\\n            uint256 wstAmountToUnwrap =\\n                wstEth.getWstETHByStETH(stethNeededFromUnwrap);\\n\\n            wstEth.unwrap(wstAmountToUnwrap);\\n\\n            uint256 newStEthBalance = steth.balanceOf(address(this));\\n            require(\\n                ethBalance.add(newStEthBalance) >= minETHOut,\\n                \\\"Unwrapping wstETH did not return sufficient stETH\\\"\\n            );\\n            return newStEthBalance;\\n        }\\n        return startStEthBalance;\\n    }\\n\\n    /**\\n     * @notice Swaps from stEth to ETH on the Lido Curve pool\\n     * @param steth is the address for the Lido staked ether\\n     * @param crvPool is the Curve pool address to do the swap\\n     * @param stEthAmount is the stEth amount to be swapped to Ether\\n     * @return ethAmountOutFromSwap is the returned ETH amount from swap\\n     */\\n    function swapStEthToEth(\\n        IERC20 steth,\\n        address crvPool,\\n        uint256 stEthAmount\\n    ) internal returns (uint256) {\\n        steth.safeApprove(crvPool, stEthAmount);\\n\\n        // CRV SWAP HERE from steth -> eth\\n        // 0 = ETH, 1 = STETH\\n        // We are setting 1, which is the smallest possible value for the _minAmountOut parameter\\n        // However it is fine because we check that the totalETHOut >= minETHOut at the end\\n        // which makes sandwich attacks not possible\\n        uint256 ethAmountOutFromSwap =\\n            ICRV(crvPool).exchange(1, 0, stEthAmount, 1);\\n\\n        return ethAmountOutFromSwap;\\n    }\\n\\n    /**\\n     * @notice Wraps the necessary amount of the base token to the yield-bearing yearn token\\n     * @param weth is the address of weth\\n     * @param collateralToken is the address of the collateral token\\n     */\\n    function wrapToYieldToken(\\n        address weth,\\n        address collateralToken,\\n        address steth\\n    ) external {\\n        // Unwrap all weth premiums transferred to contract\\n        IWETH wethToken = IWETH(weth);\\n        uint256 wethBalance = wethToken.balanceOf(address(this));\\n\\n        if (wethBalance > 0) {\\n            wethToken.withdraw(wethBalance);\\n        }\\n\\n        uint256 ethBalance = address(this).balance;\\n\\n        IWSTETH collateral = IWSTETH(collateralToken);\\n        IERC20 stethToken = IERC20(steth);\\n\\n        if (ethBalance > 0) {\\n            // Send eth to Lido, recieve steth\\n            ISTETH(steth).submit{value: ethBalance}(address(this));\\n        }\\n\\n        // Get all steth in contract\\n        uint256 stethBalance = stethToken.balanceOf(address(this));\\n\\n        if (stethBalance > 0) {\\n            // approve wrap\\n            stethToken.safeApprove(collateralToken, stethBalance.add(1));\\n            // Wrap to wstETH - need to add 1 to steth balance as it is innacurate\\n            collateral.wrap(stethBalance.add(1));\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets stETH for direct stETH withdrawals, converts wstETH/ETH to stETH if not enough stETH\\n     * @param steth is the address of steth\\n     * @param wstEth is the address of wsteth\\n     * @param amount is the amount to withdraw\\n     * @return amount of stETH to transfer to the user, this is to account for rounding errors when unwrapping wstETH\\n     */\\n    function withdrawStEth(\\n        address steth,\\n        address wstEth,\\n        uint256 amount\\n    ) external returns (uint256) {\\n        // 3 different scenarios for withdrawing stETH directly\\n        // Scenario 1. We hold enough stETH to satisfy withdrawal. Send it out directly\\n        // Scenario 2. We hold enough stETH + wstETH to satisy withdrawal. Unwrap wstETH then send it\\n        // Scenario 3. We hold enough stETH + wstETH + ETH satisfy withdrawal. Unwrap wstETH, wrap ETH then send it\\n        uint256 _amount = amount;\\n        uint256 stethBalance = IERC20(steth).balanceOf(address(this));\\n        if (stethBalance >= amount) {\\n            // Can send out the stETH directly\\n            return amount; // We return here if we have enough stETH to satisfy the withdrawal\\n        } else {\\n            // If amount > stethBalance, send out the entire stethBalance and check wstETH and ETH\\n            amount = amount.sub(stethBalance);\\n        }\\n        uint256 wstethBalance = IWSTETH(wstEth).balanceOf(address(this));\\n        uint256 totalShares = ISTETH(steth).getTotalShares();\\n        uint256 totalPooledEther = ISTETH(steth).getTotalPooledEther();\\n        stethBalance = wstethBalance.mul(totalPooledEther).div(totalShares);\\n        if (stethBalance >= amount) {\\n            wstethBalance = amount.mul(totalShares).div(totalPooledEther);\\n            // Avoids reverting if unwrap amount is 0\\n            if (wstethBalance > 0) {\\n                // Unwraps wstETH and sends out the received stETH directly\\n                IWSTETH(wstEth).unwrap(wstethBalance);\\n                // Accounts for rounding errors when unwrapping wstETH, this is safe because this function would've\\n                // returned already if the stETH balance was greater than our withdrawal amount\\n                return IERC20(steth).balanceOf(address(this)); // We return here if we have enough stETH + wstETH\\n            }\\n        } else if (stethBalance > 0) {\\n            stethBalance = IERC20(steth).balanceOf(address(this));\\n            IWSTETH(wstEth).unwrap(wstethBalance);\\n            // Accounts for rounding errors when unwrapping wstETH\\n            amount = amount.sub(\\n                IERC20(steth).balanceOf(address(this)).sub(stethBalance)\\n            );\\n        }\\n        // Wrap ETH to stETH if we don't have enough stETH + wstETH\\n        uint256 ethBalance = address(this).balance;\\n        if (amount > 0 && ethBalance >= amount) {\\n            ISTETH(steth).submit{value: amount}(address(this));\\n        } else if (ethBalance > 0) {\\n            ISTETH(steth).submit{value: ethBalance}(address(this));\\n        }\\n        stethBalance = IERC20(steth).balanceOf(address(this));\\n        // Accounts for rounding errors by a margin of 3 wei\\n        require(_amount.add(3) >= stethBalance, \\\"Unwrapped too much stETH\\\");\\n        require(_amount <= stethBalance.add(3), \\\"Unwrapped insufficient stETH\\\");\\n        return stethBalance; // We return here if we have enough stETH + wstETH + ETH\\n    }\\n\\n    /**\\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\\n     * @param recipient is the receiving address\\n     * @param amount is the transfer amount\\n     */\\n    function transferAsset(address recipient, uint256 amount) public {\\n        (bool success, ) = payable(recipient).call{value: amount}(\\\"\\\");\\n        require(success, \\\"!success\\\");\\n    }\\n\\n    function getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        address collateralToken\\n    ) external view returns (uint256) {\\n        return\\n            _getOTokenPremium(\\n                oTokenAddress,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                collateralToken\\n            );\\n    }\\n\\n    function _getOTokenPremium(\\n        address oTokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount,\\n        address collateralToken\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(oTokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated in the underlying asset for call option\\n        // and USDC for put option\\n        uint256 optionPremium =\\n            premiumPricer.getPremium(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium.mul(premiumDiscount).div(\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        // get the black scholes premium of the option and adjust premium based on\\n        // steth <-> eth exchange rate\\n        uint256 adjustedPremium =\\n            DSMath.wmul(\\n                optionPremium,\\n                IWSTETH(collateralToken).stEthPerToken()\\n            );\\n\\n        require(\\n            adjustedPremium <= type(uint96).max,\\n            \\\"adjustedPremium > type(uint96) max value!\\\"\\n        );\\n        require(adjustedPremium > 0, \\\"!adjustedPremium\\\");\\n\\n        return adjustedPremium;\\n    }\\n}\\n\",\"keccak256\":\"0x190fd83541555af3ce2d12cfb20a8a03330a6fb38ff70304d43d8bc932ceb62b\",\"license\":\"MIT\"},\"contracts/storage/RibbonThetaSTETHVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nabstract contract RibbonThetaSTETHVaultStorageV1 {\\n    // Logic contract used to price options\\n    address public optionsPremiumPricer;\\n    // Logic contract used to select strike prices\\n    address public strikeSelection;\\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\\n    uint256 public premiumDiscount;\\n    // Current oToken premium\\n    uint256 public currentOtokenPremium;\\n    // Last round id at which the strike was manually overridden\\n    uint16 public lastStrikeOverrideRound;\\n    // Price last overridden strike set to\\n    uint256 public overriddenStrikePrice;\\n    // Auction duration\\n    uint256 public auctionDuration;\\n    // Auction id of current option\\n    uint256 public optionAuctionID;\\n}\\n\\nabstract contract RibbonThetaSTETHVaultStorageV2 {\\n    // Amount locked for scheduled withdrawals last week;\\n    uint256 public lastQueuedWithdrawAmount;\\n}\\n\\nabstract contract RibbonThetaSTETHVaultStorageV3 {\\n    // LiquidityGauge contract for the vault\\n    address public liquidityGauge;\\n}\\n\\n// We are following Compound's method of upgrading new contract implementations\\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\\nabstract contract RibbonThetaSTETHVaultStorage is\\n    RibbonThetaSTETHVaultStorageV1,\\n    RibbonThetaSTETHVaultStorageV2,\\n    RibbonThetaSTETHVaultStorageV3\\n{\\n\\n}\\n\",\"keccak256\":\"0xffa0a9a4caa1847e536165f63455a89ea65b581570f80d8e4932f8a3856052a9\",\"license\":\"MIT\"},\"contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {DSMath} from \\\"../../vendor/DSMath.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {GnosisAuction} from \\\"../../libraries/GnosisAuction.sol\\\";\\nimport {IWSTETH} from \\\"../../interfaces/ISTETH.sol\\\";\\nimport {Vault} from \\\"../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleSTETH} from \\\"../../libraries/VaultLifecycleSTETH.sol\\\";\\nimport {ShareMath} from \\\"../../libraries/ShareMath.sol\\\";\\nimport {ILiquidityGauge} from \\\"../../interfaces/ILiquidityGauge.sol\\\";\\nimport {RibbonVault} from \\\"./base/RibbonVault.sol\\\";\\nimport {\\n    RibbonThetaSTETHVaultStorage\\n} from \\\"../../storage/RibbonThetaSTETHVaultStorage.sol\\\";\\n\\n/**\\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\\n * the inheritance chain closely.\\n * Any changes/appends in storage variable needs to happen in RibbonThetaSTETHVaultStorage.\\n * RibbonThetaSTETHVault should not inherit from any other contract aside from RibbonVault, RibbonThetaSTETHVaultStorage\\n */\\ncontract RibbonThetaSTETHVault is RibbonVault, RibbonThetaSTETHVaultStorage {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice is the factory contract used to spawn otokens. Used to lookup otokens.\\n    address public immutable OTOKEN_FACTORY;\\n\\n    // The minimum duration for an option auction.\\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event OpenShort(\\n        address indexed options,\\n        uint256 depositAmount,\\n        address indexed manager\\n    );\\n\\n    event CloseShort(\\n        address indexed options,\\n        uint256 withdrawAmount,\\n        address indexed manager\\n    );\\n\\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\\n\\n    event PremiumDiscountSet(\\n        uint256 premiumDiscount,\\n        uint256 newPremiumDiscount\\n    );\\n\\n    event AuctionDurationSet(\\n        uint256 auctionDuration,\\n        uint256 newAuctionDuration\\n    );\\n\\n    event InstantWithdraw(\\n        address indexed account,\\n        uint256 amount,\\n        uint256 round\\n    );\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _wsteth is the LDO contract\\n     * @param _ldo is the LDO contract\\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _crvPool is the steth/eth crv stables pool\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _wsteth,\\n        address _ldo,\\n        address _oTokenFactory,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _crvPool\\n    )\\n        RibbonVault(\\n            _weth,\\n            _usdc,\\n            _wsteth,\\n            _ldo,\\n            _gammaController,\\n            _marginPool,\\n            _gnosisEasyAuction,\\n            _crvPool\\n        )\\n    {\\n        require(_oTokenFactory != address(0), \\\"!_oTokenFactory\\\");\\n        OTOKEN_FACTORY = _oTokenFactory;\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     * @param _owner is the owner of the vault with critical permissions\\n     * @param _keeper is the keeper of the vault with medium permissions (weekly actions)\\n     * @param _feeRecipient is the address to recieve vault performance and management fees\\n     * @param _managementFee is the management fee pct.\\n     * @param _performanceFee is the perfomance fee pct.\\n     * @param _tokenName is the name of the token\\n     * @param _tokenSymbol is the symbol of the token\\n     * @param _optionsPremiumPricer is the address of the contract with the\\n       black-scholes premium calculation logic\\n     * @param _strikeSelection is the address of the contract with strike selection logic\\n     * @param _premiumDiscount is the vault's discount applied to the premium\\n     * @param _auctionDuration is the duration of the gnosis auction\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function initialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        address _optionsPremiumPricer,\\n        address _strikeSelection,\\n        uint32 _premiumDiscount,\\n        uint256 _auctionDuration,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external initializer {\\n        baseInitialize(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _managementFee,\\n            _performanceFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n        require(_optionsPremiumPricer != address(0), \\\"!_optionsPremiumPricer\\\");\\n        require(_strikeSelection != address(0), \\\"!_strikeSelection\\\");\\n        require(\\n            _premiumDiscount > 0 &&\\n                _premiumDiscount < 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"!_premiumDiscount\\\"\\n        );\\n        require(_auctionDuration >= MIN_AUCTION_DURATION, \\\"!_auctionDuration\\\");\\n        optionsPremiumPricer = _optionsPremiumPricer;\\n        strikeSelection = _strikeSelection;\\n        premiumDiscount = _premiumDiscount;\\n        auctionDuration = _auctionDuration;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new discount on premiums for options we are selling\\n     * @param newPremiumDiscount is the premium discount\\n     */\\n    function setPremiumDiscount(uint256 newPremiumDiscount)\\n        external\\n        onlyKeeper\\n    {\\n        require(\\n            newPremiumDiscount > 0 &&\\n                newPremiumDiscount <= 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\\n            \\\"Invalid discount\\\"\\n        );\\n\\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\\n\\n        premiumDiscount = newPremiumDiscount;\\n    }\\n\\n    /**\\n     * @notice Sets the new auction duration\\n     * @param newAuctionDuration is the auction duration\\n     */\\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\\n        require(\\n            newAuctionDuration >= MIN_AUCTION_DURATION,\\n            \\\"Invalid auction duration\\\"\\n        );\\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\\n        auctionDuration = newAuctionDuration;\\n    }\\n\\n    /**\\n     * @notice Sets the new strike selection or options premium pricer contract\\n     * @param newContract is the address of the new strike selection or options premium pricer contract\\n     * @param isStrikeSelection is whether we are setting the strike selection contract\\n     */\\n    function setStrikeSelectionOrPricer(\\n        address newContract,\\n        bool isStrikeSelection\\n    ) external onlyOwner {\\n        require(newContract != address(0), \\\"!newContract\\\");\\n        if (isStrikeSelection) {\\n            strikeSelection = newContract;\\n        } else {\\n            optionsPremiumPricer = newContract;\\n        }\\n    }\\n\\n    /**\\n     * @notice Optionality to set strike price manually\\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\\n     */\\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\\n        require(strikePrice > 0, \\\"!strikePrice\\\");\\n        overriddenStrikePrice = strikePrice;\\n        lastStrikeOverrideRound = vaultState.round;\\n    }\\n\\n    /**\\n     * @notice Sets the new liquidityGauge contract for this vault\\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\\n     */\\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\\n        liquidityGauge = newLiquidityGauge;\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\\n     * @param amount is the amount to withdraw in `asset`\\n     */\\n    function withdrawInstantly(uint256 amount, uint256) external nonReentrant {\\n        Vault.DepositReceipt storage depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        uint256 currentRound = vaultState.round;\\n\\n        require(amount > 0, \\\"!amount\\\");\\n        require(depositReceipt.round == currentRound, \\\"Invalid round\\\");\\n\\n        uint256 receiptAmount = depositReceipt.amount;\\n        require(receiptAmount >= amount, \\\"Exceed amount\\\");\\n\\n        // Subtraction underflow checks already ensure it is smaller than uint104\\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\\n        vaultState.totalPending = uint128(\\n            uint256(vaultState.totalPending).sub(amount)\\n        );\\n\\n        IERC20(STETH).safeTransfer(\\n            msg.sender,\\n            VaultLifecycleSTETH.withdrawStEth(\\n                STETH,\\n                address(collateralToken),\\n                amount\\n            )\\n        );\\n\\n        emit InstantWithdraw(msg.sender, amount, currentRound);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     */\\n    function completeWithdraw() external nonReentrant {\\n        uint256 withdrawAmount = _completeWithdraw();\\n        lastQueuedWithdrawAmount = uint128(\\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\\n        );\\n    }\\n\\n    /**\\n     * @notice Stakes a users vault shares\\n     * @param numShares is the number of shares to stake\\n     */\\n    function stake(uint256 numShares) external nonReentrant {\\n        address _liquidityGauge = liquidityGauge;\\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\\n        require(numShares > 0);\\n        uint256 heldByAccount = balanceOf(msg.sender);\\n        if (heldByAccount < numShares) {\\n            _redeem(numShares.sub(heldByAccount), false);\\n        }\\n        _transfer(msg.sender, address(this), numShares);\\n        _approve(address(this), _liquidityGauge, numShares);\\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\\n    }\\n\\n    /**\\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\\n     *         This allows all the users to withdraw if the next option is malicious.\\n     */\\n    function commitAndClose() external nonReentrant {\\n        address oldOption = optionState.currentOption;\\n\\n        VaultLifecycle.CloseParams memory closeParams =\\n            VaultLifecycle.CloseParams({\\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\\n                USDC: USDC,\\n                currentOption: oldOption,\\n                delay: DELAY,\\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\\n                overriddenStrikePrice: overriddenStrikePrice,\\n                strikeSelection: strikeSelection,\\n                optionsPremiumPricer: optionsPremiumPricer,\\n                premiumDiscount: premiumDiscount\\n            });\\n\\n        (\\n            address otokenAddress,\\n            uint256 premium,\\n            uint256 strikePrice,\\n            uint256 delta\\n        ) =\\n            VaultLifecycleSTETH.commitAndClose(\\n                closeParams,\\n                vaultParams,\\n                vaultState,\\n                address(collateralToken)\\n            );\\n\\n        emit NewOptionStrikeSelected(strikePrice, delta);\\n\\n        ShareMath.assertUint104(premium);\\n\\n        currentOtokenPremium = uint104(premium);\\n        optionState.nextOption = otokenAddress;\\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\\n        require(\\n            nextOptionReady <= type(uint32).max,\\n            \\\"Overflow nextOptionReady\\\"\\n        );\\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\\n\\n        _closeShort(oldOption);\\n    }\\n\\n    /**\\n     * @notice Closes the existing short position for the vault.\\n     */\\n    function _closeShort(address oldOption) private {\\n        uint256 lockedAmount = vaultState.lockedAmount;\\n        if (oldOption != address(0)) {\\n            vaultState.lastLockedAmount = uint104(lockedAmount);\\n        }\\n        vaultState.lockedAmount = 0;\\n\\n        optionState.currentOption = address(0);\\n\\n        if (oldOption != address(0)) {\\n            uint256 withdrawAmount =\\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\\n        }\\n    }\\n\\n    /**\\n     * @notice Rolls the vault's funds into a new short position.\\n     */\\n    function rollToNextOption() external onlyKeeper nonReentrant {\\n        (address newOption, uint256 queuedWithdrawAmount) =\\n            _rollToNextOption(uint256(lastQueuedWithdrawAmount));\\n\\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\\n\\n        // Locked balance denominated in `collateralToken`\\n        uint256 lockedBalance =\\n            collateralToken.balanceOf(address(this)).sub(\\n                collateralToken.getWstETHByStETH(queuedWithdrawAmount)\\n            );\\n\\n        emit OpenShort(newOption, lockedBalance, msg.sender);\\n\\n        VaultLifecycleSTETH.createShort(\\n            GAMMA_CONTROLLER,\\n            MARGIN_POOL,\\n            newOption,\\n            lockedBalance\\n        );\\n\\n        _startAuction();\\n    }\\n\\n    /**\\n     * @notice Initiate the gnosis auction.\\n     */\\n    function startAuction() external onlyKeeper nonReentrant {\\n        _startAuction();\\n    }\\n\\n    function _startAuction() private {\\n        GnosisAuction.AuctionDetails memory auctionDetails;\\n\\n        address currentOtoken = optionState.currentOption;\\n        uint256 currOtokenPremium =\\n            VaultLifecycleSTETH.getOTokenPremium(\\n                currentOtoken,\\n                optionsPremiumPricer,\\n                premiumDiscount,\\n                address(collateralToken)\\n            );\\n\\n        auctionDetails.oTokenAddress = currentOtoken;\\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\\n        auctionDetails.asset = vaultParams.asset;\\n        auctionDetails.assetDecimals = vaultParams.decimals;\\n        auctionDetails.oTokenPremium = currOtokenPremium;\\n        auctionDetails.duration = auctionDuration;\\n\\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Burn the remaining oTokens left over from gnosis auction.\\n     */\\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\\n        uint256 unlockedAssetAmount =\\n            VaultLifecycle.burnOtokens(\\n                GAMMA_CONTROLLER,\\n                optionState.currentOption\\n            );\\n\\n        vaultState.lockedAmount = uint104(\\n            uint256(vaultState.lockedAmount).sub(\\n                collateralToken.getStETHByWstETH(unlockedAssetAmount)\\n            )\\n        );\\n\\n        // Wrap entire `asset` balance to `collateralToken` balance\\n        VaultLifecycleSTETH.wrapToYieldToken(\\n            WETH,\\n            address(collateralToken),\\n            STETH\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x858aaad74787b2ef7bdba02c97c204e520b4c1658e0f9ed0826e339197be33f5\",\"license\":\"MIT\"},\"contracts/vaults/STETHVault/base/RibbonVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.4;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    ReentrancyGuardUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {\\n    OwnableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {\\n    ERC20Upgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\nimport {IWSTETH} from \\\"../../../interfaces/ISTETH.sol\\\";\\nimport {Vault} from \\\"../../../libraries/Vault.sol\\\";\\nimport {VaultLifecycle} from \\\"../../../libraries/VaultLifecycle.sol\\\";\\nimport {VaultLifecycleSTETH} from \\\"../../../libraries/VaultLifecycleSTETH.sol\\\";\\nimport {ShareMath} from \\\"../../../libraries/ShareMath.sol\\\";\\n\\ncontract RibbonVault is\\n    ReentrancyGuardUpgradeable,\\n    OwnableUpgradeable,\\n    ERC20Upgradeable\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using ShareMath for Vault.DepositReceipt;\\n\\n    /************************************************\\n     *  NON UPGRADEABLE STORAGE\\n     ***********************************************/\\n\\n    /// @notice Stores the user's pending deposit for the round\\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\\n\\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\\n    /// This is used to determine the number of shares to be returned\\n    /// to a user with their DepositReceipt.depositAmount\\n    mapping(uint256 => uint256) public roundPricePerShare;\\n\\n    /// @notice Stores pending user withdrawals\\n    mapping(address => Vault.Withdrawal) public withdrawals;\\n\\n    /// @notice Vault's parameters like cap, decimals\\n    Vault.VaultParams public vaultParams;\\n\\n    /// @notice Vault's lifecycle state like round and locked amounts\\n    Vault.VaultState public vaultState;\\n\\n    /// @notice Vault's state of the options sold and the timelocked option\\n    Vault.OptionState public optionState;\\n\\n    /// @notice Fee recipient for the performance and management fees\\n    address public feeRecipient;\\n\\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\\n    // no access to critical vault changes\\n    address public keeper;\\n\\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\\n    uint256 public performanceFee;\\n\\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\\n    uint256 public managementFee;\\n\\n    /// @notice wstETH vault contract\\n    IWSTETH public immutable collateralToken;\\n\\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\\n    uint256[30] private ____gap;\\n\\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaSTETHVaultStorage\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\\n\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\\n    address public immutable WETH;\\n\\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\\n    address public immutable USDC;\\n\\n    /// @notice Lido DAO token 0x5a98fcbea516cf06857215779fd812ca3bef1b32\\n    address public immutable LDO;\\n\\n    /// @notice 15 minute timelock between commitAndClose and rollToNexOption.\\n    uint256 public constant DELAY = 0;\\n\\n    /// @notice 7 day period between each options sale.\\n    uint256 public constant PERIOD = 7 days;\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\\n\\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\\n    // which allows users to perform multiple actions on their vaults\\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\\n    address public immutable GAMMA_CONTROLLER;\\n\\n    // MARGIN_POOL is Gamma protocol's collateral pool.\\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\\n    address public immutable MARGIN_POOL;\\n\\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\\n    address public immutable GNOSIS_EASY_AUCTION;\\n\\n    // Curve stETH / ETH stables pool\\n    address public immutable STETH_ETH_CRV_POOL;\\n\\n    /// @notice STETH contract address\\n    address public immutable STETH;\\n\\n    /************************************************\\n     *  EVENTS\\n     ***********************************************/\\n\\n    event Deposit(address indexed account, uint256 amount, uint256 round);\\n\\n    event InitiateWithdraw(\\n        address indexed account,\\n        uint256 shares,\\n        uint256 round\\n    );\\n\\n    event Redeem(address indexed account, uint256 share, uint256 round);\\n\\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\\n    event CapSet(uint256 oldCap, uint256 newCap);\\n\\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\\n\\n    event CollectVaultFees(\\n        uint256 performanceFee,\\n        uint256 vaultFee,\\n        uint256 round,\\n        address indexed feeRecipient\\n    );\\n\\n    /************************************************\\n     *  CONSTRUCTOR & INITIALIZATION\\n     ***********************************************/\\n\\n    /**\\n     * @notice Initializes the contract with immutable variables\\n     * @param _weth is the Wrapped Ether contract\\n     * @param _usdc is the USDC contract\\n     * @param _wsteth is the wstETH contract\\n     * @param _ldo is the LDO contract\\n     * @param _gammaController is the contract address for opyn actions\\n     * @param _marginPool is the contract address for providing collateral to opyn\\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\\n     * @param _crvPool is the steth/eth crv stables pool\\n     */\\n    constructor(\\n        address _weth,\\n        address _usdc,\\n        address _wsteth,\\n        address _ldo,\\n        address _gammaController,\\n        address _marginPool,\\n        address _gnosisEasyAuction,\\n        address _crvPool\\n    ) {\\n        require(_weth != address(0), \\\"!_weth\\\");\\n        require(_usdc != address(0), \\\"!_usdc\\\");\\n        require(_wsteth != address(0), \\\"!_wsteth\\\");\\n        require(_ldo != address(0), \\\"!_ldo\\\");\\n\\n        require(_gnosisEasyAuction != address(0), \\\"!_gnosisEasyAuction\\\");\\n        require(_gammaController != address(0), \\\"!_gammaController\\\");\\n        require(_marginPool != address(0), \\\"!_marginPool\\\");\\n        require(_crvPool != address(0), \\\"!_crvPool\\\");\\n\\n        WETH = _weth;\\n        USDC = _usdc;\\n        LDO = _ldo;\\n        STETH = IWSTETH(_wsteth).stETH();\\n\\n        GAMMA_CONTROLLER = _gammaController;\\n        MARGIN_POOL = _marginPool;\\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\\n        STETH_ETH_CRV_POOL = _crvPool;\\n        collateralToken = IWSTETH(_wsteth);\\n    }\\n\\n    /**\\n     * @notice Initializes the OptionVault contract with storage variables.\\n     */\\n    function baseInitialize(\\n        address _owner,\\n        address _keeper,\\n        address _feeRecipient,\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) internal initializer {\\n        VaultLifecycle.verifyInitializerParams(\\n            _owner,\\n            _keeper,\\n            _feeRecipient,\\n            _performanceFee,\\n            _managementFee,\\n            _tokenName,\\n            _tokenSymbol,\\n            _vaultParams\\n        );\\n\\n        __ReentrancyGuard_init();\\n        __ERC20_init(_tokenName, _tokenSymbol);\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n\\n        keeper = _keeper;\\n\\n        feeRecipient = _feeRecipient;\\n        performanceFee = _performanceFee;\\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\\n            WEEKS_PER_YEAR\\n        );\\n        vaultParams = _vaultParams;\\n\\n        uint256 assetBalance = totalBalance();\\n        ShareMath.assertUint104(assetBalance);\\n        vaultState.lastLockedAmount = uint104(assetBalance);\\n\\n        vaultState.round = 1;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the keeper.\\n     */\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"!keeper\\\");\\n        _;\\n    }\\n\\n    /************************************************\\n     *  SETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Sets the new keeper\\n     * @param newKeeper is the address of the new keeper\\n     */\\n    function setNewKeeper(address newKeeper) external onlyOwner {\\n        require(newKeeper != address(0), \\\"!newKeeper\\\");\\n        keeper = newKeeper;\\n    }\\n\\n    /**\\n     * @notice Sets the new fee recipient\\n     * @param newFeeRecipient is the address of the new fee recipient\\n     */\\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\\n        require(newFeeRecipient != address(0), \\\"!newFeeRecipient\\\");\\n        require(newFeeRecipient != feeRecipient, \\\"Must be new feeRecipient\\\");\\n        feeRecipient = newFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Sets the management fee for the vault\\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\\n     */\\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\\n        require(\\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid management fee\\\"\\n        );\\n\\n        // We are dividing annualized management fee by num weeks in a year\\n        uint256 tmpManagementFee =\\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\\n\\n        emit ManagementFeeSet(managementFee, newManagementFee);\\n\\n        managementFee = tmpManagementFee;\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee for the vault\\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\\n     */\\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\\n        require(\\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"Invalid performance fee\\\"\\n        );\\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\\n        performanceFee = newPerformanceFee;\\n    }\\n\\n    /**\\n     * @notice Sets a new cap for deposits\\n     * @param newCap is the new cap for deposits\\n     */\\n    function setCap(uint256 newCap) external onlyOwner {\\n        require(newCap > 0, \\\"!newCap\\\");\\n        ShareMath.assertUint104(newCap);\\n        emit CapSet(vaultParams.cap, newCap);\\n        vaultParams.cap = uint104(newCap);\\n    }\\n\\n    /************************************************\\n     *  DEPOSIT & WITHDRAWALS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Deposits ETH into the contract and mint vault shares.\\n     */\\n    function depositETH() external payable nonReentrant {\\n        require(msg.value > 0, \\\"!value\\\");\\n\\n        _depositFor(msg.value, msg.sender, true);\\n    }\\n\\n    /**\\n     * @notice Deposits the `collateralAsset` into the contract and mint vault shares.\\n     * @param amount is the amount of `collateralAsset` to deposit\\n     */\\n    function depositYieldToken(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"!amount\\\");\\n\\n        // stETH transfers suffer from an off-by-1 error\\n        _depositFor(amount.sub(1), msg.sender, false);\\n\\n        IERC20(STETH).safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    /**\\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\\n     * @notice Used for vault -> vault deposits on the user's behalf\\n     * @param creditor is the address that can claim/withdraw deposited amount\\n     */\\n    function depositFor(address creditor) external payable nonReentrant {\\n        require(msg.value > 0, \\\"!value\\\");\\n        require(creditor != address(0), \\\"!creditor\\\");\\n\\n        _depositFor(msg.value, creditor, true);\\n    }\\n\\n    /**\\n     * @notice Mints the vault shares to the creditor\\n     * @param amount is the amount of `asset` deposited\\n     * @param creditor is the address to receieve the deposit\\n     * @param isETH is whether this is a depositETH call\\n     */\\n    function _depositFor(\\n        uint256 amount,\\n        address creditor,\\n        bool isETH\\n    ) private {\\n        uint256 currentRound = vaultState.round;\\n        uint256 totalWithDepositedAmount =\\n            isETH ? totalBalance() : totalBalance().add(amount);\\n\\n        require(totalWithDepositedAmount <= vaultParams.cap, \\\"Exceed cap\\\");\\n        require(\\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\\n            \\\"Insufficient balance\\\"\\n        );\\n\\n        emit Deposit(creditor, amount, currentRound);\\n\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\\n\\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        uint256 depositAmount = amount;\\n        // If we have a pending deposit in the current round, we add on to the pending deposit\\n        if (currentRound == depositReceipt.round) {\\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\\n            depositAmount = newAmount;\\n        }\\n\\n        ShareMath.assertUint104(depositAmount);\\n\\n        depositReceipts[creditor] = Vault.DepositReceipt({\\n            round: uint16(currentRound),\\n            amount: uint104(depositAmount),\\n            unredeemedShares: uint128(unredeemedShares)\\n        });\\n\\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\\n        ShareMath.assertUint128(newTotalPending);\\n        vaultState.totalPending = uint128(newTotalPending);\\n    }\\n\\n    /**\\n     * @notice Initiates a withdrawal that can be processed once the round completes\\n     * @param numShares is the number of shares to withdraw\\n     */\\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n\\n        // We do a max redeem before initiating a withdrawal\\n        // But we check if they must first have unredeemed shares\\n        if (\\n            depositReceipts[msg.sender].amount > 0 ||\\n            depositReceipts[msg.sender].unredeemedShares > 0\\n        ) {\\n            _redeem(0, true);\\n        }\\n\\n        // This caches the `round` variable used in shareBalances\\n        uint256 currentRound = vaultState.round;\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\\n\\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\\n\\n        uint256 existingShares = uint256(withdrawal.shares);\\n\\n        uint256 withdrawalShares;\\n        if (withdrawalIsSameRound) {\\n            withdrawalShares = existingShares.add(numShares);\\n        } else {\\n            require(existingShares == 0, \\\"Existing withdraw\\\");\\n            withdrawalShares = numShares;\\n            withdrawals[msg.sender].round = uint16(currentRound);\\n        }\\n\\n        ShareMath.assertUint128(withdrawalShares);\\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\\n\\n        uint256 newQueuedWithdrawShares =\\n            uint256(vaultState.queuedWithdrawShares).add(numShares);\\n        ShareMath.assertUint128(newQueuedWithdrawShares);\\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\\n\\n        _transfer(msg.sender, address(this), numShares);\\n    }\\n\\n    /**\\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\\n     * @return amountETHOut the current withdrawal amount\\n     */\\n    function _completeWithdraw() internal returns (uint256) {\\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\\n\\n        uint256 withdrawalShares = withdrawal.shares;\\n        uint256 withdrawalRound = withdrawal.round;\\n\\n        // This checks if there is a withdrawal\\n        require(withdrawalShares > 0, \\\"Not initiated\\\");\\n\\n        require(withdrawalRound < vaultState.round, \\\"Round not closed\\\");\\n\\n        // We leave the round number as non-zero to save on gas for subsequent writes\\n        withdrawals[msg.sender].shares = 0;\\n        vaultState.queuedWithdrawShares = uint128(\\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\\n        );\\n\\n        uint256 withdrawAmount =\\n            ShareMath.sharesToAsset(\\n                withdrawalShares,\\n                roundPricePerShare[withdrawalRound],\\n                vaultParams.decimals\\n            );\\n\\n        IERC20(STETH).safeTransfer(\\n            msg.sender,\\n            VaultLifecycleSTETH.withdrawStEth(\\n                STETH,\\n                address(collateralToken),\\n                withdrawAmount\\n            )\\n        );\\n\\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\\n\\n        _burn(address(this), withdrawalShares);\\n\\n        return withdrawAmount;\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem\\n     */\\n    function redeem(uint256 numShares) external nonReentrant {\\n        require(numShares > 0, \\\"!numShares\\\");\\n        _redeem(numShares, false);\\n    }\\n\\n    /**\\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\\n     */\\n    function maxRedeem() external nonReentrant {\\n        _redeem(0, true);\\n    }\\n\\n    /**\\n     * @notice Redeems shares that are owed to the account\\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\\n     * @param isMax is flag for when callers do a max redemption\\n     */\\n    function _redeem(uint256 numShares, bool isMax) internal {\\n        Vault.DepositReceipt memory depositReceipt =\\n            depositReceipts[msg.sender];\\n\\n        // This handles the null case when depositReceipt.round = 0\\n        // Because we start with round = 1 at `initialize`\\n        uint256 currentRound = vaultState.round;\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                currentRound,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        numShares = isMax ? unredeemedShares : numShares;\\n        if (numShares == 0) {\\n            return;\\n        }\\n        require(numShares <= unredeemedShares, \\\"Exceeds available\\\");\\n\\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\\n        // we debit from the unredeemedShares, but leave the amount field intact\\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\\n        if (depositReceipt.round < currentRound) {\\n            depositReceipts[msg.sender].amount = 0;\\n        }\\n\\n        ShareMath.assertUint128(numShares);\\n        depositReceipts[msg.sender].unredeemedShares = uint128(\\n            unredeemedShares.sub(numShares)\\n        );\\n\\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\\n\\n        _transfer(address(this), msg.sender, numShares);\\n    }\\n\\n    /************************************************\\n     *  VAULT OPERATIONS\\n     ***********************************************/\\n\\n    /*\\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\\n     * @param numRounds is the number of rounds to initialize in the map\\n     */\\n    function initRounds(uint256 numRounds) external nonReentrant {\\n        require(numRounds > 0, \\\"!numRounds\\\");\\n\\n        uint256 _round = vaultState.round;\\n        for (uint256 i = 0; i < numRounds; i++) {\\n            uint256 index = _round + i;\\n            require(roundPricePerShare[index] == 0, \\\"Initialized\\\"); // AVOID OVERWRITING ACTUAL VALUES\\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\\n        }\\n    }\\n\\n    /*\\n     * @notice Helper function that performs most administrative tasks\\n     * such as setting next option, minting new shares, getting vault fees, etc.\\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\\n     * @return newOption is the new option address\\n     * @return queuedWithdrawAmount is the queued amount for withdrawal\\n     */\\n    function _rollToNextOption(uint256 lastQueuedWithdrawAmount)\\n        internal\\n        returns (address, uint256)\\n    {\\n        require(block.timestamp >= optionState.nextOptionReadyAt, \\\"!ready\\\");\\n\\n        address newOption = optionState.nextOption;\\n        require(newOption != address(0), \\\"!nextOption\\\");\\n\\n        (\\n            uint256 newLockedBalanceInETH,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        ) =\\n            VaultLifecycle.rollover(\\n                vaultState,\\n                VaultLifecycle.RolloverParams(\\n                    vaultParams.decimals,\\n                    totalBalance(),\\n                    totalSupply(),\\n                    lastQueuedWithdrawAmount,\\n                    performanceFee,\\n                    managementFee\\n                )\\n            );\\n\\n        optionState.currentOption = newOption;\\n        optionState.nextOption = address(0);\\n\\n        {\\n            address vaultFeeRecipient = feeRecipient;\\n            address collateral = address(collateralToken);\\n\\n            // Finalize the pricePerShare at the end of the round\\n            uint256 currentRound = vaultState.round;\\n            roundPricePerShare[currentRound] = newPricePerShare;\\n\\n            // Wrap entire `asset` balance to `collateralToken` balance\\n            VaultLifecycleSTETH.wrapToYieldToken(WETH, collateral, STETH);\\n\\n            emit CollectVaultFees(\\n                performanceFeeInAsset,\\n                totalVaultFee,\\n                currentRound,\\n                vaultFeeRecipient\\n            );\\n\\n            vaultState.totalPending = 0;\\n            vaultState.round = uint16(currentRound + 1);\\n            ShareMath.assertUint104(newLockedBalanceInETH);\\n            vaultState.lockedAmount = uint104(newLockedBalanceInETH);\\n\\n            _mint(address(this), mintShares);\\n\\n            if (totalVaultFee > 0) {\\n                VaultLifecycleSTETH.withdrawYieldAndBaseToken(\\n                    collateral,\\n                    WETH,\\n                    vaultFeeRecipient,\\n                    totalVaultFee\\n                );\\n            }\\n        }\\n\\n        return (newOption, queuedWithdrawAmount);\\n    }\\n\\n    /*\\n     * @notice Transfers LDO rewards to feeRecipient\\n     */\\n    function sendLDORewards() external {\\n        IERC20 ldo = IERC20(LDO);\\n        ldo.safeTransfer(feeRecipient, ldo.balanceOf(address(this)));\\n    }\\n\\n    /************************************************\\n     *  GETTERS\\n     ***********************************************/\\n\\n    /**\\n     * @notice Returns the asset balance held on the vault for the account\\n     * @param account is the address to lookup balance for\\n     * @return the amount of `asset` custodied by the vault for the user\\n     */\\n    function accountVaultBalance(address account)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        uint256 _decimals = vaultParams.decimals;\\n        uint256 assetPerShare =\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                _decimals\\n            );\\n        return\\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance including unredeemed shares\\n     * @param account is the account to lookup share balance for\\n     * @return the share balance\\n     */\\n    function shares(address account) public view returns (uint256) {\\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\\n        return heldByAccount.add(heldByVault);\\n    }\\n\\n    /**\\n     * @notice Getter for returning the account's share balance split between account and vault holdings\\n     * @param account is the account to lookup share balance for\\n     * @return heldByAccount is the shares held by account\\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\\n     */\\n    function shareBalances(address account)\\n        public\\n        view\\n        returns (uint256 heldByAccount, uint256 heldByVault)\\n    {\\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\\n\\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\\n            return (balanceOf(account), 0);\\n        }\\n\\n        uint256 unredeemedShares =\\n            depositReceipt.getSharesFromReceipt(\\n                vaultState.round,\\n                roundPricePerShare[depositReceipt.round],\\n                vaultParams.decimals\\n            );\\n\\n        return (balanceOf(account), unredeemedShares);\\n    }\\n\\n    /**\\n     * @notice The price of a unit of share denominated in the `asset`\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return\\n            ShareMath.pricePerShare(\\n                totalSupply(),\\n                totalBalance(),\\n                vaultState.totalPending,\\n                vaultParams.decimals\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\\n     * @return total balance of the vault, including the amounts locked in third party protocols\\n     */\\n    function totalBalance() public view returns (uint256) {\\n        uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\\n        uint256 ethBalance = address(this).balance;\\n        uint256 stethFromWsteth =\\n            collateralToken.getStETHByWstETH(\\n                collateralToken.balanceOf(address(this))\\n            );\\n\\n        uint256 stEthBalance = IERC20(STETH).balanceOf(address(this));\\n\\n        return\\n            wethBalance\\n                .add(vaultState.lockedAmount)\\n                .add(ethBalance)\\n                .add(stethFromWsteth)\\n                .add(stEthBalance);\\n    }\\n\\n    /**\\n     * @notice Returns the token decimals\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return vaultParams.decimals;\\n    }\\n\\n    function cap() external view returns (uint256) {\\n        return vaultParams.cap;\\n    }\\n\\n    function nextOptionReadyAt() external view returns (uint256) {\\n        return optionState.nextOptionReadyAt;\\n    }\\n\\n    function currentOption() external view returns (address) {\\n        return optionState.currentOption;\\n    }\\n\\n    function nextOption() external view returns (address) {\\n        return optionState.nextOption;\\n    }\\n\\n    function totalPending() external view returns (uint256) {\\n        return vaultState.totalPending;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n}\\n\",\"keccak256\":\"0xba34b2c2af7bc4a2b6f31d0ac23980e986e233b31f3da2fee2550297052c9db1\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106104895760003560e01c806395d89b4111610255578063c632183911610144578063e16fdbd5116100c1578063f6326fb311610085578063f6326fb314611072578063f656ba511461107a578063f756fa21146110af578063f957a067146110c4578063f9a0be68146110e4578063fe56e2321461110457600080fd5b8063e16fdbd514610fe7578063e73c63d514611007578063e74b981b1461101d578063ea00b1ca1461103d578063f2fde38b1461105257600080fd5b8063d88bba1111610108578063d88bba1114610ee5578063db006a7514610f19578063db43e86214610f39578063dd62ed3e14610f6d578063e00bfe5014610fb357600080fd5b8063c632183914610e4f578063ce7c2ac214610e6f578063d13f1b3e14610e8f578063d164cc1514610eaf578063d5f2638214610ecf57600080fd5b8063a6f7f5d6116101d2578063ad7a672f11610196578063ad7a672f14610dba578063afa6626414610dcf578063b2016bd414610def578063b4d1d79514610e23578063b9f8092b14610e3a57600080fd5b8063a6f7f5d614610d1d578063a9059cbb14610d33578063aa67c91914610d53578063aced166114610d66578063ad5c464814610d8657600080fd5b8063a285c9e811610219578063a285c9e814610c7d578063a2db9d8314610c9f578063a457c2d714610cbd578063a497e67414610cdd578063a694fc3a14610cfd57600080fd5b806395d89b4114610b2457806399530b0614610b395780639be43daa14610b4e5780639fcc2d7514610b6e578063a083ff1714610c1a57600080fd5b806355489bb21161037c578063715018a6116102f957806383536ff3116102bd57806383536ff314610a5b57806387153eb114610a715780638778878214610a9e57806389a3027114610ab45780638b10cc7c14610ae85780638da5cb5b14610b0657600080fd5b8063715018a61461098d5780637400173d146109a25780637a9262a2146109c25780637bf5108614610a265780637e108d5214610a3b57600080fd5b80636b64c769116103405780636b64c769146108d95780636c10f66c146108ee5780636f31ab341461092257806370897b231461093757806370a082311461095757600080fd5b806355489bb2146107d7578063600a2cfb146107f7578063650cce8a1461080c5780636719b2ee1461084057806369b41170146108c457600080fd5b8063355274ea1161040a578063432833a6116103ce578063432833a614610737578063469048401461074d57806347786d371461076d5780634f6e746d1461078d578063503c70aa146107c157600080fd5b8063355274ea1461068d57806339509351146106ab5780633ec143d3146106cb5780633f23bb73146106f95780633f90916a1461071957600080fd5b80631a92f6c2116104515780631a92f6c21461054457806323b872dd146105905780632728f333146105b0578063313ce5671461064357806331807e421461066d57600080fd5b8063048bf0851461048e57806306fdde03146104b0578063095ea7b3146104db5780630cbf54c81461050b57806318160ddd1461052f575b600080fd5b34801561049a57600080fd5b506104ae6104a936600461544f565b611124565b005b3480156104bc57600080fd5b506104c5611179565b6040516104d29190615897565b60405180910390f35b3480156104e757600080fd5b506104fb6104f636600461560f565b61120b565b60405190151581526020016104d2565b34801561051757600080fd5b5061052160fb5481565b6040519081526020016104d2565b34801561053b57600080fd5b50609954610521565b34801561055057600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104d2565b34801561059c57600080fd5b506104fb6105ab3660046155a2565b611222565b3480156105bc57600080fd5b5060cf5460d0546105fe9161ffff8116916001600160681b03620100008304811692600160781b900416906001600160801b0380821691600160801b90041685565b6040805161ffff90961686526001600160681b03948516602087015293909216928401929092526001600160801b03918216606084015216608082015260a0016104d2565b34801561064f57600080fd5b5060cc54610100900460ff1660405160ff90911681526020016104d2565b34801561067957600080fd5b506104ae6106883660046156bb565b6112ce565b34801561069957600080fd5b5060ce546001600160681b0316610521565b3480156106b757600080fd5b506104fb6106c636600461560f565b61137f565b3480156106d757600080fd5b5060f9546106e69061ffff1681565b60405161ffff90911681526020016104d2565b34801561070557600080fd5b5061052161071436600461544f565b6113bb565b34801561072557600080fd5b5060d0546001600160801b0316610521565b34801561074357600080fd5b5061052160fc5481565b34801561075957600080fd5b5060d354610578906001600160a01b031681565b34801561077957600080fd5b506104ae6107883660046156bb565b61140e565b34801561079957600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b3480156107cd57600080fd5b5061052160fd5481565b3480156107e357600080fd5b506104ae6107f2366004615694565b6114e9565b34801561080357600080fd5b506104ae611581565b34801561081857600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b34801561084c57600080fd5b5061089361085b36600461544f565b60c96020526000908152604090205461ffff8116906201000081046001600160681b031690600160781b90046001600160801b031683565b6040805161ffff90941684526001600160681b0390921660208401526001600160801b0316908201526060016104d2565b3480156108d057600080fd5b50610521600081565b3480156108e557600080fd5b506104ae611850565b3480156108fa57600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b34801561092e57600080fd5b506104ae6118b0565b34801561094357600080fd5b506104ae6109523660046156bb565b6118e7565b34801561096357600080fd5b5061052161097236600461544f565b6001600160a01b031660009081526097602052604090205490565b34801561099957600080fd5b506104ae6119ae565b3480156109ae57600080fd5b506104ae6109bd3660046155e2565b6119e4565b3480156109ce57600080fd5b50610a046109dd36600461544f565b60cb6020526000908152604090205461ffff8116906201000090046001600160801b031682565b6040805161ffff90931683526001600160801b039091166020830152016104d2565b348015610a3257600080fd5b506104ae611a9a565b348015610a4757600080fd5b506104ae610a563660046156bb565b611b52565b348015610a6757600080fd5b5061052160f75481565b348015610a7d57600080fd5b50610521610a8c3660046156bb565b60ca6020526000908152604090205481565b348015610aaa57600080fd5b5061052160d55481565b348015610ac057600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610af457600080fd5b5060d2546001600160a01b0316610578565b348015610b1257600080fd5b506065546001600160a01b0316610578565b348015610b3057600080fd5b506104c5611d8d565b348015610b4557600080fd5b50610521611d9c565b348015610b5a57600080fd5b506104ae610b693660046156bb565b611dd6565b348015610b7a57600080fd5b5060cc5460cd5460ce54610bca9260ff808216936101008304909116926001600160a01b036201000090930483169282169166ffffffffffffff600160a01b90910416906001600160681b031686565b60408051961515875260ff90951660208701526001600160a01b03938416948601949094529116606084015266ffffffffffffff1660808301526001600160681b031660a082015260c0016104d2565b348015610c2657600080fd5b5060d15460d254610c51916001600160a01b039081169190811690600160a01b900463ffffffff1683565b604080516001600160a01b03948516815293909216602084015263ffffffff16908201526060016104d2565b348015610c8957600080fd5b5060d254600160a01b900463ffffffff16610521565b348015610cab57600080fd5b5060d1546001600160a01b0316610578565b348015610cc957600080fd5b506104fb610cd836600461560f565b611ed0565b348015610ce957600080fd5b506104ae610cf83660046156bb565b611f69565b348015610d0957600080fd5b506104ae610d183660046156bb565b612026565b348015610d2957600080fd5b5061052160d65481565b348015610d3f57600080fd5b506104fb610d4e36600461560f565b612116565b6104ae610d6136600461544f565b612123565b348015610d7257600080fd5b5060d454610578906001600160a01b031681565b348015610d9257600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610dc657600080fd5b506105216121cf565b348015610ddb57600080fd5b5060f554610578906001600160a01b031681565b348015610dfb57600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610e2f57600080fd5b5061052162093a8081565b348015610e4657600080fd5b506104ae61245a565b348015610e5b57600080fd5b506104ae610e6a3660046156eb565b61273c565b348015610e7b57600080fd5b50610521610e8a36600461544f565b612a02565b348015610e9b57600080fd5b506104ae610eaa3660046156bb565b612a1f565b348015610ebb57600080fd5b506104ae610eca36600461544f565b612ae4565b348015610edb57600080fd5b5061052160f85481565b348015610ef157600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610f2557600080fd5b506104ae610f343660046156bb565b612b73565b348015610f4557600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610f7957600080fd5b50610521610f8836600461546b565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b348015610fbf57600080fd5b506105787f000000000000000000000000000000000000000000000000000000000000000081565b348015610ff357600080fd5b506104ae6110023660046154a3565b612be0565b34801561101357600080fd5b5061052160fa5481565b34801561102957600080fd5b506104ae61103836600461544f565b612dec565b34801561104957600080fd5b506104ae612edf565b34801561105e57600080fd5b506104ae61106d36600461544f565b61316d565b6104ae613205565b34801561108657600080fd5b5061109a61109536600461544f565b61326f565b604080519283526020830191909152016104d2565b3480156110bb57600080fd5b506104ae613352565b3480156110d057600080fd5b5060f654610578906001600160a01b031681565b3480156110f057600080fd5b5060fe54610578906001600160a01b031681565b34801561111057600080fd5b506104ae61111f3660046156bb565b6133a7565b6065546001600160a01b031633146111575760405162461bcd60e51b815260040161114e90615919565b60405180910390fd5b60fe80546001600160a01b0319166001600160a01b0392909216919091179055565b6060609a805461118890615bec565b80601f01602080910402602001604051908101604052809291908181526020018280546111b490615bec565b80156112015780601f106111d657610100808354040283529160200191611201565b820191906000526020600020905b8154815290600101906020018083116111e457829003601f168201915b5050505050905090565b6000611218338484613488565b5060015b92915050565b600061122f8484846135ad565b6001600160a01b0384166000908152609860209081526040808320338452909152902054828110156112b45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161114e565b6112c18533858403613488565b60019150505b9392505050565b600260015414156112f15760405162461bcd60e51b815260040161114e9061594e565b60026001558061132d5760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161114e565b61134361133b82600161377d565b336000613789565b6113786001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084613a28565b5060018055565b3360008181526098602090815260408083206001600160a01b038716845290915281205490916112189185906113b6908690615a67565b613488565b60cc5460009060ff61010090910416816113f16113d760995490565b6113df6121cf565b60d0546001600160801b031685613a93565b90506114066113ff85612a02565b8284613ad3565b949350505050565b6065546001600160a01b031633146114385760405162461bcd60e51b815260040161114e90615919565b600081116114725760405162461bcd60e51b81526020600482015260076024820152660216e65774361760cc1b604482015260640161114e565b61147b81613b35565b60ce54604080516001600160681b039092168252602082018390527f5f86edbb9d92228a9edc3f0ebc0f001bda1ea345ac7335e0eeef3504b31d1a1c910160405180910390a160ce80546cffffffffffffffffffffffffff19166001600160681b0392909216919091179055565b6065546001600160a01b031633146115135760405162461bcd60e51b815260040161114e90615919565b6000816001600160801b03161161155b5760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b604482015260640161114e565b6001600160801b031660fa5560cf5460f9805461ffff191661ffff909216919091179055565b60d4546001600160a01b031633146115ab5760405162461bcd60e51b815260040161114e906158aa565b600260015414156115ce5760405162461bcd60e51b815260040161114e9061594e565b600260015560d2546040516358ffbb3d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152909116602482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__906358ffbb3d9060440160206040518083038186803b15801561165557600080fd5b505af4158015611669573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168d91906156d3565b604051632eca54bf60e21b815260048101829052909150611744906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063bb2952fc9060240160206040518083038186803b1580156116f457600080fd5b505afa158015611708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172c91906156d3565b60cf546201000090046001600160681b03169061377d565b60cf805462010000600160781b031916620100006001600160681b039390931692909202919091179055604051631989ea7560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301527f000000000000000000000000000000000000000000000000000000000000000016604482015273__$09b2ed88edfa44a3a64aec022eed7f982f$__90636627a9d49060640160006040518083038186803b15801561183157600080fd5b505af4158015611845573d6000803e3d6000fd5b505060018055505050565b60d4546001600160a01b0316331461187a5760405162461bcd60e51b815260040161114e906158aa565b6002600154141561189d5760405162461bcd60e51b815260040161114e9061594e565b60026001556118aa613b7f565b60018055565b600260015414156118d35760405162461bcd60e51b815260040161114e9061594e565b60026001819055506118aa60006001613da3565b6065546001600160a01b031633146119115760405162461bcd60e51b815260040161114e90615919565b61191f620f42406064615b8a565b811061196d5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420706572666f726d616e636520666565000000000000000000604482015260640161114e565b60d55460408051918252602082018390527f24867dfb6fcb9970a07be21024956524abe7a1837faa903ff0e99aaa40cf893e910160405180910390a160d555565b6065546001600160a01b031633146119d85760405162461bcd60e51b815260040161114e90615919565b6119e26000613f52565b565b6065546001600160a01b03163314611a0e5760405162461bcd60e51b815260040161114e90615919565b6001600160a01b038216611a535760405162461bcd60e51b815260206004820152600c60248201526b085b995dd0dbdb9d1c9858dd60a21b604482015260640161114e565b8015611a7a5760f680546001600160a01b0384166001600160a01b03199091161790555050565b60f580546001600160a01b0319166001600160a01b0384161790555b5050565b60d3546040516370a0823160e01b81523060048201527f000000000000000000000000000000000000000000000000000000000000000091611b4f916001600160a01b03918216918416906370a082319060240160206040518083038186803b158015611b0657600080fd5b505afa158015611b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3e91906156d3565b6001600160a01b0384169190613fa4565b50565b60026001541415611b755760405162461bcd60e51b815260040161114e9061594e565b600260015580611bb45760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161114e565b33600090815260c960205260409020546201000090046001600160681b0316151580611bfe575033600090815260c96020526040902054600160781b90046001600160801b031615155b15611c0f57611c0f60006001613da3565b60cf5433600081815260cb60209081526040918290208054835187815261ffff96871693810184905292959194911685149290917f0c53c82ad07e2d592d88ece3b066777dd60f1118e2a081b380efc4358f0d9e2a910160405180910390a281546201000090046001600160801b031660008215611c9857611c918287613fd9565b9050611cfb565b8115611cda5760405162461bcd60e51b81526020600482015260116024820152704578697374696e6720776974686472617760781b604482015260640161114e565b5033600090815260cb60205260409020805461ffff191661ffff8616179055845b611d0481613fe5565b33600090815260cb6020526040812080546001600160801b03808516620100000262010000600160901b03199092169190911790915560d054611d5091600160801b9091041688613fd9565b9050611d5b81613fe5565b60d080546001600160801b03808416600160801b029116179055611d803330896135ad565b5050600180555050505050565b6060609b805461118890615bec565b6000611dd1611daa60995490565b611db26121cf565b60d05460cc546001600160801b0390911690610100900460ff16613a93565b905090565b60026001541415611df95760405162461bcd60e51b815260040161114e9061594e565b600260015580611e385760405162461bcd60e51b815260206004820152600a602482015269216e756d526f756e647360b01b604482015260640161114e565b60cf5461ffff1660005b82811015611ec7576000611e568284615a67565b600081815260ca602052604090205490915015611ea35760405162461bcd60e51b815260206004820152600b60248201526a125b9a5d1a585b1a5e995960aa1b604482015260640161114e565b600090815260ca602052604090206001905580611ebf81615c21565b915050611e42565b50506001805550565b3360009081526098602090815260408083206001600160a01b038616845290915281205482811015611f525760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161114e565b611f5f3385858403613488565b5060019392505050565b6065546001600160a01b03163314611f935760405162461bcd60e51b815260040161114e90615919565b61012c811015611fe55760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642061756374696f6e206475726174696f6e0000000000000000604482015260640161114e565b60fb5460408051918252602082018390527f5acd982e2240ed224a69aa03dab039d3797c108e4b5f288cd7dd6ca181b275f3910160405180910390a160fb55565b600260015414156120495760405162461bcd60e51b815260040161114e9061594e565b600260015560fe546001600160a01b03168061206457600080fd5b6000821161207157600080fd5b336000908152609760205260409020548281101561209d5761209d612096848361377d565b6000613da3565b6120a83330856135ad565b6120b3308385613488565b6040516383df674760e01b815260048101849052336024820152600060448201526001600160a01b038316906383df674790606401600060405180830381600087803b15801561210257600080fd5b505af1158015611d80573d6000803e3d6000fd5b60006112183384846135ad565b600260015414156121465760405162461bcd60e51b815260040161114e9061594e565b6002600155346121815760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b604482015260640161114e565b6001600160a01b0381166121c35760405162461bcd60e51b815260206004820152600960248201526810b1b932b234ba37b960b91b604482015260640161114e565b61137834826001613789565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b15801561223357600080fd5b505afa158015612247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226b91906156d3565b6040516370a0823160e01b815230600482015290915047906000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bb2952fc9082906370a082319060240160206040518083038186803b1580156122da57600080fd5b505afa1580156122ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231291906156d3565b6040518263ffffffff1660e01b815260040161233091815260200190565b60206040518083038186803b15801561234857600080fd5b505afa15801561235c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238091906156d3565b6040516370a0823160e01b81523060048201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d91906156d3565b60cf5490915061245190829061244b9085908290889082908b906201000090046001600160681b0316613fd9565b90613fd9565b94505050505090565b60d4546001600160a01b031633146124845760405162461bcd60e51b815260040161114e906158aa565b600260015414156124a75760405162461bcd60e51b815260040161114e9061594e565b60026001819055506000806124bd60fd5461402f565b60fd81905560405162b0e38960e81b8152600481018290529193509150600090612602907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b0e389009060240160206040518083038186803b15801561252d57600080fd5b505afa158015612541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061256591906156d3565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b1580156125c457600080fd5b505afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc91906156d3565b9061377d565b9050336001600160a01b0316836001600160a01b03167f045c558fdce4714c5816d53820d27420f4cd860892df203fe636384d8d19aa018360405161264991815260200190565b60405180910390a3604051632904c23960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152841660448201526064810182905273__$09b2ed88edfa44a3a64aec022eed7f982f$__90632904c2399060840160206040518083038186803b1580156126fb57600080fd5b505af415801561270f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273391906156d3565b50611ec7613b7f565b6002600154141561275f5760405162461bcd60e51b815260040161114e9061594e565b600260015533600090815260c96020526040902060cf5461ffff16836127b15760405162461bcd60e51b815260206004820152600760248201526608585b5bdd5b9d60ca1b604482015260640161114e565b815461ffff1681146127f55760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a59081c9bdd5b99609a1b604482015260640161114e565b81546201000090046001600160681b0316848110156128465760405162461bcd60e51b815260206004820152600d60248201526c115e18d9595908185b5bdd5b9d609a1b604482015260640161114e565b612850818661377d565b83546001600160681b0391909116620100000262010000600160781b031990911617835560d05461288a906001600160801b03168661377d565b60d080546001600160801b0319166001600160801b0392909216919091179055604051633be3450960e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000166024820152604481018690526129bc90339073__$09b2ed88edfa44a3a64aec022eed7f982f$__906377c68a12906064015b60206040518083038186803b15801561295357600080fd5b505af4158015612967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298b91906156d3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190613fa4565b604080518681526020810184905233917fab2daf3c146ca6416cbccd2a86ed2ba995e171ef6319df14a38aef01403a9c96910160405180910390a2505060018055505050565b6000806000612a108461326f565b90925090506114068282613fd9565b60d4546001600160a01b03163314612a495760405162461bcd60e51b815260040161114e906158aa565b600081118015612a645750612a60600a6064615b8a565b8111155b612aa35760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908191a5cd8dbdd5b9d60821b604482015260640161114e565b60f75460408051918252602082018390527f4cd657fde404967d63a338fb06c5c98751a9df57dfae6dc333a432faf8a5f656910160405180910390a160f755565b6065546001600160a01b03163314612b0e5760405162461bcd60e51b815260040161114e90615919565b6001600160a01b038116612b515760405162461bcd60e51b815260206004820152600a60248201526910b732bba5b2b2b832b960b11b604482015260640161114e565b60d480546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612b965760405162461bcd60e51b815260040161114e9061594e565b600260015580612bd55760405162461bcd60e51b815260206004820152600a602482015269216e756d53686172657360b01b604482015260640161114e565b611378816000613da3565b600054610100900460ff1680612bf9575060005460ff16155b612c155760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015612c37576000805461ffff19166101011790555b612c478d8d8d8d8d8d8d8961451c565b6001600160a01b038616612c965760405162461bcd60e51b815260206004820152601660248201527510afb7b83a34b7b739a83932b6b4bab6a83934b1b2b960511b604482015260640161114e565b6001600160a01b038516612ce05760405162461bcd60e51b815260206004820152601160248201527010afb9ba3934b5b2a9b2b632b1ba34b7b760791b604482015260640161114e565b60008463ffffffff16118015612d065750612cfd600a6064615b8a565b8463ffffffff16105b612d465760405162461bcd60e51b81526020600482015260116024820152700857dc1c995b5a5d5b511a5cd8dbdd5b9d607a1b604482015260640161114e565b61012c831015612d8c5760405162461bcd60e51b815260206004820152601160248201527010afb0bab1ba34b7b7223ab930ba34b7b760791b604482015260640161114e565b60f580546001600160a01b038089166001600160a01b03199283161790925560f680549288169290911691909117905563ffffffff841660f75560fb8390558015612ddd576000805461ff00191690555b50505050505050505050505050565b6065546001600160a01b03163314612e165760405162461bcd60e51b815260040161114e90615919565b6001600160a01b038116612e5f5760405162461bcd60e51b815260206004820152601060248201526f085b995dd19959549958da5c1a595b9d60821b604482015260640161114e565b60d3546001600160a01b0382811691161415612ebd5760405162461bcd60e51b815260206004820152601860248201527f4d757374206265206e657720666565526563697069656e740000000000000000604482015260640161114e565b60d380546001600160a01b0319166001600160a01b0392909216919091179055565b60026001541415612f025760405162461bcd60e51b815260040161114e9061594e565b600260015560d25460408051610120810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000008116602083015292831681830181905260006060830181905260f95461ffff16608084015260fa5460a084015260f654851660c084015260f55490941660e083015260f75461010083015291516001621eaadd60e11b031981529192909181908190819073__$09b2ed88edfa44a3a64aec022eed7f982f$__9063ffc2aa469061301990889060cc9060cf907f000000000000000000000000000000000000000000000000000000000000000090600401615985565b60806040518083038186803b15801561303157600080fd5b505af4158015613045573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613069919061563a565b93509350935093507fa217999b1c125c2a996f712c5f26a28addad7167bd8a67d5bd5b2a751148abb082826040516130ab929190918252602082015260400190565b60405180910390a16130bc83613b35565b6001600160681b03831660f85560d180546001600160a01b0319166001600160a01b03861617905560006130f04282613fd9565b905063ffffffff8111156131465760405162461bcd60e51b815260206004820152601860248201527f4f766572666c6f77206e6578744f7074696f6e52656164790000000000000000604482015260640161114e565b60d2805463ffffffff60a01b1916600160a01b63ffffffff841602179055611d80876146e4565b6065546001600160a01b031633146131975760405162461bcd60e51b815260040161114e90615919565b6001600160a01b0381166131fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161114e565b611b4f81613f52565b600260015414156132285760405162461bcd60e51b815260040161114e9061594e565b6002600155346132635760405162461bcd60e51b81526020600482015260066024820152652176616c756560d01b604482015260640161114e565b6118aa34336001613789565b6001600160a01b038116600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031694830194909452600160781b90046001600160801b0316918101919091528291600111156132f1575050506001600160a01b031660009081526097602052604081205491565b60cf54815161ffff908116600090815260ca602052604081205460cc54919361332793869391169190610100900460ff16614856565b9050613348856001600160a01b031660009081526097602052604090205490565b9590945092505050565b600260015414156133755760405162461bcd60e51b815260040161114e9061594e565b600260015560006133846148c7565b60fd54909150613394908261377d565b6001600160801b031660fd555060018055565b6065546001600160a01b031633146133d15760405162461bcd60e51b815260040161114e90615919565b6133df620f42406064615b8a565b81106134265760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d616e6167656d656e742066656560501b604482015260640161114e565b600061344363031ba30961343d84620f4240614acd565b90614ad9565b60d65460408051918252602082018590529192507f4e874b007ab14f7e263baefd44951834c8266f4f224d1092e49e9c254354cc54910160405180910390a160d65550565b6001600160a01b0383166134ea5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161114e565b6001600160a01b03821661354b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161114e565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166136115760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161114e565b6001600160a01b0382166136735760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161114e565b6001600160a01b038316600090815260976020526040902054818110156136eb5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161114e565b6001600160a01b03808516600090815260976020526040808220858503905591851681529081208054849290613722908490615a67565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161376e91815260200190565b60405180910390a35b50505050565b60006112c78284615ba9565b60cf5461ffff166000826137a8576137a38561244b6121cf565b6137b0565b6137b06121cf565b60ce549091506001600160681b03168111156137fb5760405162461bcd60e51b815260206004820152600a6024820152690457863656564206361760b41b604482015260640161114e565b60cd54600160a01b900466ffffffffffffff168110156138545760405162461bcd60e51b8152602060048201526014602482015273496e73756666696369656e742062616c616e636560601b604482015260640161114e565b60408051868152602081018490526001600160a01b038616917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a26001600160a01b038416600090815260c9602090815260408083208151606081018352905461ffff81168083526201000082046001600160681b031683860152600160781b9091046001600160801b031682840152845260ca90925282205460cc54919291613913918491879190610100900460ff16614856565b8251909150879061ffff16851415613944576020830151600090613940906001600160681b03168a613fd9565b9150505b61394d81613b35565b6040805160608101825261ffff80881682526001600160681b0380851660208085019182526001600160801b038089168688019081526001600160a01b038f16600090815260c990935296822095518654935197518216600160781b02600160781b600160f81b03199890951662010000026effffffffffffffffffffffffffffff1990941695169490941791909117949094161790915560d0546139f391168a613fd9565b90506139fe81613fe5565b60d080546001600160801b0319166001600160801b03929092169190911790555050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526137779085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614ae5565b600080613aa183600a615ae2565b905060008611613ab15780613ac9565b613ac98661343d613ac2888861377d565b8490614acd565b9695505050505050565b600060018311613b1d5760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b604482015260640161114e565b611406613b2b83600a615ae2565b61343d8686614acd565b6001600160681b03811115611b4f5760405162461bcd60e51b815260206004820152601060248201526f13dd995c999b1bddc81d5a5b9d0c4c0d60821b604482015260640161114e565b6040805160c081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260d25460f55460f754945163188b696960e31b81526001600160a01b0392831660048201819052918316602482015260448101959095527f00000000000000000000000000000000000000000000000000000000000000009091166064850152919273__$09b2ed88edfa44a3a64aec022eed7f982f$__9063c45b4b489060840160206040518083038186803b158015613c4957600080fd5b505af4158015613c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c8191906156d3565b6001600160a01b0383811685527f000000000000000000000000000000000000000000000000000000000000000081166020860190815260cc546201000081048316604080890191825261010090920460ff16606089019081526080890186815260fb5460a08b019081529351633baf17fd60e21b81528a5187166004820152945186166024860152915190941660448401529251606483015291516084820152905160a482015290915073__$c4f279750f4bbb575ac7775e752dc00849$__9063eebc5ff49060c40160206040518083038186803b158015613d6357600080fd5b505af4158015613d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d9b91906156d3565b60fc55505050565b33600090815260c9602090815260408083208151606081018352905461ffff8082168084526201000083046001600160681b031684870152600160781b9092046001600160801b03168385015260cf5491865260ca9094529184205460cc5491949290931692613e1e9185918591610100900460ff16614856565b905083613e2b5784613e2d565b805b945084613e3b575050505050565b80851115613e7f5760405162461bcd60e51b81526020600482015260116024820152704578636565647320617661696c61626c6560781b604482015260640161114e565b825161ffff16821115613eac5733600090815260c960205260409020805462010000600160781b03191690555b613eb585613fe5565b613ebf818661377d565b33600081815260c960205260409081902080546001600160801b0394909416600160781b02600160781b600160f81b0319909416939093179092558451915190917fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92991613f389189825261ffff16602082015260400190565b60405180910390a2613f4b3033876135ad565b5050505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b038316602482015260448101829052613fd490849063a9059cbb60e01b90606401613a5c565b505050565b60006112c78284615a67565b6001600160801b03811115611b4f5760405162461bcd60e51b815260206004820152601060248201526f09eeccae4ccd8deee40ead2dce86264760831b604482015260640161114e565b60d2546000908190600160a01b900463ffffffff1642101561407c5760405162461bcd60e51b815260206004820152600660248201526521726561647960d01b604482015260640161114e565b60d1546001600160a01b0316806140c35760405162461bcd60e51b815260206004820152600b60248201526a10b732bc3a27b83a34b7b760a91b604482015260640161114e565b60008060008060008073__$c4f279750f4bbb575ac7775e752dc00849$__63633c142660cf6040518060c0016040528060cc60000160019054906101000a900460ff1660ff1681526020016141166121cf565b815260200161412460995490565b81526020018e815260200160d554815260200160d6548152506040518363ffffffff1660e01b81526004016141a0929190600060e08201905083825282516020830152602083015160408301526040830151606083015260608301516080830152608083015160a083015260a083015160c08301529392505050565b60c06040518083038186803b1580156141b857600080fd5b505af41580156141cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f0919061570c565b9550955095509550955095508660d160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600060d360009054906101000a90046001600160a01b0316905060007f00000000000000000000000000000000000000000000000000000000000000009050600060cf60000160009054906101000a900461ffff1661ffff1690508660ca60008381526020019081526020016000208190555073__$09b2ed88edfa44a3a64aec022eed7f982f$__636627a9d47f0000000000000000000000000000000000000000000000000000000000000000847f00000000000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040161435d939291906001600160a01b0393841681529183166020830152909116604082015260600190565b60006040518083038186803b15801561437557600080fd5b505af4158015614389573d6000803e3d6000fd5b505060408051888152602081018890529081018490526001600160a01b03861692507f0a242f7ecaf711036ca770774ceffae28e60ef042ac113ddd187f2631db0c006915060600160405180910390a260d080546001600160801b03191690556143f4816001615a67565b60cf805461ffff191661ffff9290921691909117905561441389613b35565b60cf805462010000600160781b031916620100006001600160681b038c160217905561443f3087614bb7565b8315614509576040516305ffc87f60e31b81526001600160a01b0380841660048301527f000000000000000000000000000000000000000000000000000000000000000081166024830152841660448201526064810185905273__$09b2ed88edfa44a3a64aec022eed7f982f$__90632ffe43f89060840160206040518083038186803b1580156144cf57600080fd5b505af41580156144e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061450791906156d3565b505b50979b959a509498505050505050505050565b600054610100900460ff1680614535575060005460ff16155b6145515760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015614573576000805461ffff19166101011790555b60405163c72733f760e01b815273__$c4f279750f4bbb575ac7775e752dc00849$__9063c72733f7906145b8908c908c908c908b908d908c908c908c9060040161579d565b60006040518083038186803b1580156145d057600080fd5b505af41580156145e4573d6000803e3d6000fd5b505050506145f0614c96565b6145fa8484614d09565b614602614d88565b61460b8961316d565b60d480546001600160a01b03808b166001600160a01b03199283161790925560d38054928a169290911691909117905560d585905561465563031ba30961343d88620f4240614acd565b60d6558160cc6146658282615c8f565b90505060006146726121cf565b905061467d81613b35565b60cf805461ffff196001600160681b03909316600160781b02929092167fffffffff00000000000000000000000000ffffffffffffffffffffffffff000090921691909117600117905580156146d9576000805461ff00191690555b505050505050505050565b60cf546201000090046001600160681b03166001600160a01b038216156147305760cf80546cffffffffffffffffffffffffff60781b1916600160781b6001600160681b038416021790555b60cf805462010000600160781b031916905560d280546001600160a01b03191690556001600160a01b03821615611a9657604051636c6fe87f60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073__$c4f279750f4bbb575ac7775e752dc00849$__9063d8dfd0fe9060240160206040518083038186803b1580156147d757600080fd5b505af41580156147eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061480f91906156d3565b9050336001600160a01b0316836001600160a01b03167f7e830f7c1771deb1bdb35c4a7e6051bbac32b376f7f4e4976b8618b0b11997f7836040516135a091815260200190565b835160009061ffff16158015906148715750845161ffff1684115b156148b357600061489086602001516001600160681b03168585614def565b60408701519091506148ab906001600160801b031682613fd9565b915050611406565b50505050604001516001600160801b031690565b33600090815260cb6020526040812080546001600160801b03620100008204169061ffff16816149295760405162461bcd60e51b815260206004820152600d60248201526c139bdd081a5b9a5d1a585d1959609a1b604482015260640161114e565b60cf5461ffff1681106149715760405162461bcd60e51b815260206004820152601060248201526f149bdd5b99081b9bdd0818db1bdcd95960821b604482015260640161114e565b33600090815260cb60205260409020805462010000600160901b031916905560d0546149ad90600160801b90046001600160801b03168361377d565b60d080546001600160801b03928316600160801b029216919091179055600081815260ca602052604081205460cc546149f091859160ff61010090910416613ad3565b604051633be3450960e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000016602482015260448101829052909150614a8890339073__$09b2ed88edfa44a3a64aec022eed7f982f$__906377c68a129060640161293b565b604080518281526020810185905233917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568910160405180910390a26114063084614e52565b60006112c78284615b8a565b60006112c78284615a7f565b6000614b3a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614fa09092919063ffffffff16565b805190915015613fd45780806020019051810190614b589190615678565b613fd45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161114e565b6001600160a01b038216614c0d5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161114e565b8060996000828254614c1f9190615a67565b90915550506001600160a01b03821660009081526097602052604081208054839290614c4c908490615a67565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b600054610100900460ff1680614caf575060005460ff16155b614ccb5760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015614ced576000805461ffff19166101011790555b614cf5614faf565b8015611b4f576000805461ff001916905550565b600054610100900460ff1680614d22575060005460ff16155b614d3e5760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015614d60576000805461ffff19166101011790555b614d6861501e565b614d728383615088565b8015613fd4576000805461ff0019169055505050565b600054610100900460ff1680614da1575060005460ff16155b614dbd5760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015614ddf576000805461ffff19166101011790555b614de761501e565b614cf561511d565b600060018311614e395760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964206173736574506572536861726560581b604482015260640161114e565b6114068361343d614e4b85600a615ae2565b8790614acd565b6001600160a01b038216614eb25760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161114e565b6001600160a01b03821660009081526097602052604090205481811015614f265760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161114e565b6001600160a01b0383166000908152609760205260408120838303905560998054849290614f55908490615ba9565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6060611406848460008561517d565b600054610100900460ff1680614fc8575060005460ff16155b614fe45760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015615006576000805461ffff19166101011790555b600180558015611b4f576000805461ff001916905550565b600054610100900460ff1680615037575060005460ff16155b6150535760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015614cf5576000805461ffff19166101011790558015611b4f576000805461ff001916905550565b600054610100900460ff16806150a1575060005460ff16155b6150bd5760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff161580156150df576000805461ffff19166101011790555b82516150f290609a9060208601906152de565b50815161510690609b9060208501906152de565b508015613fd4576000805461ff0019169055505050565b600054610100900460ff1680615136575060005460ff16155b6151525760405162461bcd60e51b815260040161114e906158cb565b600054610100900460ff16158015615174576000805461ffff19166101011790555b614cf533613f52565b6060824710156151de5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161114e565b843b61522c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161114e565b600080866001600160a01b031685876040516152489190615781565b60006040518083038185875af1925050503d8060008114615285576040519150601f19603f3d011682016040523d82523d6000602084013e61528a565b606091505b509150915061529a8282866152a5565b979650505050505050565b606083156152b45750816112c7565b8251156152c45782518084602001fd5b8160405162461bcd60e51b815260040161114e9190615897565b8280546152ea90615bec565b90600052602060002090601f01602090048101928261530c5760008555615352565b82601f1061532557805160ff1916838001178555615352565b82800160010185558215615352579182015b82811115615352578251825591602001919060010190615337565b5061535e929150615362565b5090565b5b8082111561535e5760008155600101615363565b803561538281615da0565b919050565b600082601f830112615397578081fd5b813567ffffffffffffffff808211156153b2576153b2615c52565b604051601f8301601f19908116603f011681019082821181831017156153da576153da615c52565b816040528381528660208588010111156153f2578485fd5b8360208701602083013792830160200193909352509392505050565b600060c0828403121561541f578081fd5b50919050565b803561538281615dc3565b803563ffffffff8116811461538257600080fd5b803561538281615dd8565b600060208284031215615460578081fd5b81356112c781615da0565b6000806040838503121561547d578081fd5b823561548881615da0565b9150602083013561549881615da0565b809150509250929050565b6000806000806000806000806000806000806102208d8f0312156154c5578788fd5b6154ce8d615377565b9b506154dc60208e01615377565b9a506154ea60408e01615377565b995060608d0135985060808d0135975067ffffffffffffffff60a08e01351115615512578687fd5b6155228e60a08f01358f01615387565b965067ffffffffffffffff60c08e0135111561553c578586fd5b61554c8e60c08f01358f01615387565b955061555a60e08e01615377565b94506155696101008e01615377565b93506155786101208e01615430565b92506101408d013591506155908e6101608f0161540e565b90509295989b509295989b509295989b565b6000806000606084860312156155b6578283fd5b83356155c181615da0565b925060208401356155d181615da0565b929592945050506040919091013590565b600080604083850312156155f4578182fd5b82356155ff81615da0565b9150602083013561549881615db5565b60008060408385031215615621578182fd5b823561562c81615da0565b946020939093013593505050565b6000806000806080858703121561564f578384fd5b845161565a81615da0565b60208601516040870151606090970151919890975090945092505050565b600060208284031215615689578081fd5b81516112c781615db5565b6000602082840312156156a5578081fd5b81356001600160801b03811681146112c7578182fd5b6000602082840312156156cc578081fd5b5035919050565b6000602082840312156156e4578081fd5b5051919050565b600080604083850312156156fd578182fd5b50508035926020909101359150565b60008060008060008060c08789031215615724578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845261576d816020860160208601615bc0565b601f01601f19169290920160200192915050565b60008251615793818460208701615bc0565b9190910192915050565b60006101a060018060a01b03808c168452808b166020850152808a1660408501528860608501528760808501528160a08501526157dc82850188615755565b915083820360c08501526157f08287615755565b9250843591506157ff82615db5565b90151560e084015260208401359061581682615ded565b60ff82166101008501526040850135915061583082615da0565b1661012083015261584360608401615377565b6001600160a01b031661014083015261585e60808401615444565b66ffffffffffffff1661016083015261587960a08401615425565b6001600160681b038116610180840152509998505050505050505050565b6020815260006112c76020830184615755565b60208082526007908201526610b5b2b2b832b960c91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b84516001600160a01b031681526020808601516101808301916159b2908401826001600160a01b03169052565b5060408601516159cd60408401826001600160a01b03169052565b506060860151606083015260808601516159ed608084018261ffff169052565b5060a086015160a083015260c0860151615a1260c08401826001600160a01b03169052565b5060e0860151615a2d60e08401826001600160a01b03169052565b506101008087015181840152508461012083015283610140830152615a5e6101608301846001600160a01b03169052565b95945050505050565b60008219821115615a7a57615a7a615c3c565b500190565b600082615a9a57634e487b7160e01b81526012600452602481fd5b500490565b600181815b80851115615ada578160001904821115615ac057615ac0615c3c565b80851615615acd57918102915b93841c9390800290615aa4565b509250929050565b60006112c78383600082615af85750600161121c565b81615b055750600061121c565b8160018114615b1b5760028114615b2557615b41565b600191505061121c565b60ff841115615b3657615b36615c3c565b50506001821b61121c565b5060208310610133831016604e8410600b8410161715615b64575081810a61121c565b615b6e8383615a9f565b8060001904821115615b8257615b82615c3c565b029392505050565b6000816000190483118215151615615ba457615ba4615c3c565b500290565b600082821015615bbb57615bbb615c3c565b500390565b60005b83811015615bdb578181015183820152602001615bc3565b838111156137775750506000910152565b600181811c90821680615c0057607f821691505b6020821081141561541f57634e487b7160e01b600052602260045260246000fd5b6000600019821415615c3557615c35615c3c565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6000813561121c81615da0565b6000813561121c81615dc3565b6000813561121c81615dd8565b8135615c9a81615db5565b815460ff19811691151560ff1691821783556020840135615cba81615ded565b61ff008160081b169050808361ffff198416171784556040850135615cde81615da0565b6001600160b01b0319929092169092179190911760109190911b62010000600160b01b031617815560018101615d36615d1960608501615c68565b82546001600160a01b0319166001600160a01b0391909116178255565b615d6f615d4560808501615c82565b82805466ffffffffffffff60a01b191660a09290921b66ffffffffffffff60a01b16919091179055565b50611a96615d7f60a08401615c75565b600283016001600160681b0382166001600160681b03198254161781555050565b6001600160a01b0381168114611b4f57600080fd5b8015158114611b4f57600080fd5b6001600160681b0381168114611b4f57600080fd5b66ffffffffffffff81168114611b4f57600080fd5b60ff81168114611b4f57600080fdfea2646970667358221220f10f9b0ff24402d0b81bf1d9f260204fdc8104fe5b3bd221c2fb79dfa56623bf64736f6c63430008040033",
  "libraries": {
    "VaultLifecycle": "0xE6342509ae61b63F015f268953FCA0dE71e61128",
    "VaultLifecycleSTETH": "0xa0025d92bEaEAB39495237A162590D200cDCdc82"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountVaultBalance(address)": {
        "params": {
          "account": "is the address to lookup balance for"
        },
        "returns": {
          "_0": "the amount of `asset` custodied by the vault for the user"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "params": {
          "_crvPool": "is the steth/eth crv stables pool",
          "_gammaController": "is the contract address for opyn actions",
          "_gnosisEasyAuction": "is the contract address that facilitates gnosis auctions",
          "_ldo": "is the LDO contract",
          "_marginPool": "is the contract address for providing collateral to opyn",
          "_oTokenFactory": "is the contract address for minting new opyn option types (strikes, asset, expiry)",
          "_usdc": "is the USDC contract",
          "_weth": "is the Wrapped Ether contract",
          "_wsteth": "is the LDO contract"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "depositFor(address)": {
        "params": {
          "creditor": "is the address that can claim/withdraw deposited amount"
        }
      },
      "depositYieldToken(uint256)": {
        "params": {
          "amount": "is the amount of `collateralAsset` to deposit"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))": {
        "params": {
          "_auctionDuration": "is the duration of the gnosis auction",
          "_feeRecipient": "is the address to recieve vault performance and management fees",
          "_keeper": "is the keeper of the vault with medium permissions (weekly actions)",
          "_managementFee": "is the management fee pct.",
          "_optionsPremiumPricer": "is the address of the contract with the black-scholes premium calculation logic",
          "_owner": "is the owner of the vault with critical permissions",
          "_performanceFee": "is the perfomance fee pct.",
          "_premiumDiscount": "is the vault's discount applied to the premium",
          "_strikeSelection": "is the address of the contract with strike selection logic",
          "_tokenName": "is the name of the token",
          "_tokenSymbol": "is the symbol of the token",
          "_vaultParams": "is the struct with vault general data"
        }
      },
      "initiateWithdraw(uint256)": {
        "params": {
          "numShares": "is the number of shares to withdraw"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(uint256)": {
        "params": {
          "numShares": "is the number of shares to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAuctionDuration(uint256)": {
        "params": {
          "newAuctionDuration": "is the auction duration"
        }
      },
      "setCap(uint256)": {
        "params": {
          "newCap": "is the new cap for deposits"
        }
      },
      "setFeeRecipient(address)": {
        "params": {
          "newFeeRecipient": "is the address of the new fee recipient"
        }
      },
      "setLiquidityGauge(address)": {
        "params": {
          "newLiquidityGauge": "is the address of the new liquidityGauge contract"
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "newManagementFee": "is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%"
        }
      },
      "setNewKeeper(address)": {
        "params": {
          "newKeeper": "is the address of the new keeper"
        }
      },
      "setPerformanceFee(uint256)": {
        "params": {
          "newPerformanceFee": "is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%"
        }
      },
      "setPremiumDiscount(uint256)": {
        "params": {
          "newPremiumDiscount": "is the premium discount"
        }
      },
      "setStrikePrice(uint128)": {
        "params": {
          "strikePrice": "is the strike price of the new oTokens (decimals = 8)"
        }
      },
      "setStrikeSelectionOrPricer(address,bool)": {
        "params": {
          "isStrikeSelection": "is whether we are setting the strike selection contract",
          "newContract": "is the address of the new strike selection or options premium pricer contract"
        }
      },
      "shareBalances(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "heldByAccount": "is the shares held by account",
          "heldByVault": "is the shares held on the vault (unredeemedShares)"
        }
      },
      "shares(address)": {
        "params": {
          "account": "is the account to lookup share balance for"
        },
        "returns": {
          "_0": "the share balance"
        }
      },
      "stake(uint256)": {
        "params": {
          "numShares": "is the number of shares to stake"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalBalance()": {
        "returns": {
          "_0": "total balance of the vault, including the amounts locked in third party protocols"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawInstantly(uint256,uint256)": {
        "params": {
          "amount": "is the amount to withdraw in `asset`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELAY()": {
        "notice": "15 minute timelock between commitAndClose and rollToNexOption."
      },
      "LDO()": {
        "notice": "Lido DAO token 0x5a98fcbea516cf06857215779fd812ca3bef1b32"
      },
      "OTOKEN_FACTORY()": {
        "notice": "is the factory contract used to spawn otokens. Used to lookup otokens."
      },
      "PERIOD()": {
        "notice": "7 day period between each options sale."
      },
      "STETH()": {
        "notice": "STETH contract address"
      },
      "USDC()": {
        "notice": "USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
      },
      "WETH()": {
        "notice": "WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
      },
      "accountVaultBalance(address)": {
        "notice": "Returns the asset balance held on the vault for the account"
      },
      "burnRemainingOTokens()": {
        "notice": "Burn the remaining oTokens left over from gnosis auction."
      },
      "collateralToken()": {
        "notice": "wstETH vault contract"
      },
      "commitAndClose()": {
        "notice": "Sets the next option the vault will be shorting, and closes the existing short.         This allows all the users to withdraw if the next option is malicious."
      },
      "completeWithdraw()": {
        "notice": "Completes a scheduled withdrawal from a past round. Uses finalized pps for the round"
      },
      "constructor": {
        "notice": "Initializes the contract with immutable variables"
      },
      "decimals()": {
        "notice": "Returns the token decimals"
      },
      "depositETH()": {
        "notice": "Deposits ETH into the contract and mint vault shares."
      },
      "depositFor(address)": {
        "notice": "Deposits the `asset` from msg.sender added to `creditor`'s deposit.Used for vault -> vault deposits on the user's behalf"
      },
      "depositReceipts(address)": {
        "notice": "Stores the user's pending deposit for the round"
      },
      "depositYieldToken(uint256)": {
        "notice": "Deposits the `collateralAsset` into the contract and mint vault shares."
      },
      "feeRecipient()": {
        "notice": "Fee recipient for the performance and management fees"
      },
      "initialize(address,address,address,uint256,uint256,string,string,address,address,uint32,uint256,(bool,uint8,address,address,uint56,uint104))": {
        "notice": "Initializes the OptionVault contract with storage variables."
      },
      "initiateWithdraw(uint256)": {
        "notice": "Initiates a withdrawal that can be processed once the round completes"
      },
      "keeper()": {
        "notice": "role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens"
      },
      "managementFee()": {
        "notice": "Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss."
      },
      "maxRedeem()": {
        "notice": "Redeems the entire unredeemedShares balance that is owed to the account"
      },
      "optionState()": {
        "notice": "Vault's state of the options sold and the timelocked option"
      },
      "performanceFee()": {
        "notice": "Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss."
      },
      "pricePerShare()": {
        "notice": "The price of a unit of share denominated in the `asset`"
      },
      "redeem(uint256)": {
        "notice": "Redeems shares that are owed to the account"
      },
      "rollToNextOption()": {
        "notice": "Rolls the vault's funds into a new short position."
      },
      "roundPricePerShare(uint256)": {
        "notice": "On every round's close, the pricePerShare value of an rTHETA token is stored This is used to determine the number of shares to be returned to a user with their DepositReceipt.depositAmount"
      },
      "setAuctionDuration(uint256)": {
        "notice": "Sets the new auction duration"
      },
      "setCap(uint256)": {
        "notice": "Sets a new cap for deposits"
      },
      "setFeeRecipient(address)": {
        "notice": "Sets the new fee recipient"
      },
      "setLiquidityGauge(address)": {
        "notice": "Sets the new liquidityGauge contract for this vault"
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the management fee for the vault"
      },
      "setNewKeeper(address)": {
        "notice": "Sets the new keeper"
      },
      "setPerformanceFee(uint256)": {
        "notice": "Sets the performance fee for the vault"
      },
      "setPremiumDiscount(uint256)": {
        "notice": "Sets the new discount on premiums for options we are selling"
      },
      "setStrikePrice(uint128)": {
        "notice": "Optionality to set strike price manually"
      },
      "setStrikeSelectionOrPricer(address,bool)": {
        "notice": "Sets the new strike selection or options premium pricer contract"
      },
      "shareBalances(address)": {
        "notice": "Getter for returning the account's share balance split between account and vault holdings"
      },
      "shares(address)": {
        "notice": "Getter for returning the account's share balance including unredeemed shares"
      },
      "stake(uint256)": {
        "notice": "Stakes a users vault shares"
      },
      "startAuction()": {
        "notice": "Initiate the gnosis auction."
      },
      "totalBalance()": {
        "notice": "Returns the vault's total balance, including the amounts locked into a short position"
      },
      "vaultParams()": {
        "notice": "Vault's parameters like cap, decimals"
      },
      "vaultState()": {
        "notice": "Vault's lifecycle state like round and locked amounts"
      },
      "withdrawInstantly(uint256,uint256)": {
        "notice": "Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`"
      },
      "withdrawals(address)": {
        "notice": "Stores pending user withdrawals"
      }
    },
    "notice": "UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe the inheritance chain closely. Any changes/appends in storage variable needs to happen in RibbonThetaSTETHVaultStorage. RibbonThetaSTETHVault should not inherit from any other contract aside from RibbonVault, RibbonThetaSTETHVaultStorage",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 176,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 179,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 230,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 273,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 993,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 169,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 293,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 301,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 303,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 305,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 846,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 22375,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "depositReceipts",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_struct(DepositReceipt)6510_storage)"
      },
      {
        "astId": 22380,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "roundPricePerShare",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 22386,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "withdrawals",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_address,t_struct(Withdrawal)6515_storage)"
      },
      {
        "astId": 22390,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "vaultParams",
        "offset": 0,
        "slot": "204",
        "type": "t_struct(VaultParams)6485_storage"
      },
      {
        "astId": 22394,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "vaultState",
        "offset": 0,
        "slot": "207",
        "type": "t_struct(VaultState)6503_storage"
      },
      {
        "astId": 22398,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "optionState",
        "offset": 0,
        "slot": "209",
        "type": "t_struct(OptionState)6492_storage"
      },
      {
        "astId": 22401,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 22404,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "keeper",
        "offset": 0,
        "slot": "212",
        "type": "t_address"
      },
      {
        "astId": 22407,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 22410,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "managementFee",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 22418,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "____gap",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_uint256)30_storage"
      },
      {
        "astId": 12438,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "optionsPremiumPricer",
        "offset": 0,
        "slot": "245",
        "type": "t_address"
      },
      {
        "astId": 12440,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "strikeSelection",
        "offset": 0,
        "slot": "246",
        "type": "t_address"
      },
      {
        "astId": 12442,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "premiumDiscount",
        "offset": 0,
        "slot": "247",
        "type": "t_uint256"
      },
      {
        "astId": 12444,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "currentOtokenPremium",
        "offset": 0,
        "slot": "248",
        "type": "t_uint256"
      },
      {
        "astId": 12446,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "lastStrikeOverrideRound",
        "offset": 0,
        "slot": "249",
        "type": "t_uint16"
      },
      {
        "astId": 12448,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "overriddenStrikePrice",
        "offset": 0,
        "slot": "250",
        "type": "t_uint256"
      },
      {
        "astId": 12450,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "auctionDuration",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 12452,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "optionAuctionID",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 12455,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "lastQueuedWithdrawAmount",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 12458,
        "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
        "label": "liquidityGauge",
        "offset": 0,
        "slot": "254",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)30_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[30]",
        "numberOfBytes": "960"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(DepositReceipt)6510_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.DepositReceipt)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositReceipt)6510_storage"
      },
      "t_mapping(t_address,t_struct(Withdrawal)6515_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.Withdrawal)",
        "numberOfBytes": "32",
        "value": "t_struct(Withdrawal)6515_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositReceipt)6510_storage": {
        "encoding": "inplace",
        "label": "struct Vault.DepositReceipt",
        "members": [
          {
            "astId": 6505,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6507,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "amount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6509,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "unredeemedShares",
            "offset": 15,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OptionState)6492_storage": {
        "encoding": "inplace",
        "label": "struct Vault.OptionState",
        "members": [
          {
            "astId": 6487,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "nextOption",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6489,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "currentOption",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6491,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "nextOptionReadyAt",
            "offset": 20,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(VaultParams)6485_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultParams",
        "members": [
          {
            "astId": 6474,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "isPut",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 6476,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "decimals",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 6478,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "asset",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6480,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "underlying",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6482,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "minimumSupply",
            "offset": 20,
            "slot": "1",
            "type": "t_uint56"
          },
          {
            "astId": 6484,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "cap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint104"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VaultState)6503_storage": {
        "encoding": "inplace",
        "label": "struct Vault.VaultState",
        "members": [
          {
            "astId": 6494,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6496,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "lockedAmount",
            "offset": 2,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6498,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "lastLockedAmount",
            "offset": 15,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 6500,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "totalPending",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 6502,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "queuedWithdrawShares",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Withdrawal)6515_storage": {
        "encoding": "inplace",
        "label": "struct Vault.Withdrawal",
        "members": [
          {
            "astId": 6512,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "round",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 6514,
            "contract": "contracts/vaults/STETHVault/RibbonThetaSTETHVault.sol:RibbonThetaSTETHVault",
            "label": "shares",
            "offset": 2,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint56": {
        "encoding": "inplace",
        "label": "uint56",
        "numberOfBytes": "7"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}